<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>代码复现：GFPGAN</title>
    <link href="/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AGFPGAN/"/>
    <url>/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AGFPGAN/</url>
    
    <content type="html"><![CDATA[<p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python inference_gfpgan.py<br></code></pre></td></tr></table></figure><p>带参数（默认）</p><p>带参数（默认）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python inference_gfpgan.py -i inputs/whole_imgs -o results -v 1.3 -s 2<br></code></pre></td></tr></table></figure><p>说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">Usage: python inference_gfpgan.py -i inputs/whole_imgs -o results -v 1.3 -s 2 [options]...<br><br>  -h                   show this help<br>  -i input             Input image or folder. Default: inputs/whole_imgs<br>  -o output            Output folder. Default: results<br>  -v version           GFPGAN model version. Option: 1 | 1.2 | 1.3. Default: 1.3<br>  -s upscale           The final upsampling scale of the image. Default: 2<br>  -bg_upsampler        background upsampler. Default: realesrgan<br>  -bg_tile             Tile size for background sampler, 0 for no tile during testing. Default: 400<br>  -suffix              Suffix of the restored faces<br>  -only_center_face    Only restore the center face<br>  -aligned             Input are aligned faces<br>  -ext                 Image extension. Options: auto | jpg | png, auto means using the same extension as inputs. Default: auto<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GFPGAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码复现：CycleGAN and pix2pix</title>
    <link href="/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ACycleGAN-and-pix2pix/"/>
    <url>/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ACycleGAN-and-pix2pix/</url>
    
    <content type="html"><![CDATA[<h4 id="安装visdom"><a href="#安装visdom" class="headerlink" title="安装visdom"></a>安装visdom</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install visdom<br></code></pre></td></tr></table></figure><p>开启visdom服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m visdom.server<br></code></pre></td></tr></table></figure><h4 id="训练数据集（数据集名“xxx”更改自己的数据集名称）"><a href="#训练数据集（数据集名“xxx”更改自己的数据集名称）" class="headerlink" title="训练数据集（数据集名“xxx”更改自己的数据集名称）"></a>训练数据集（数据集名“xxx”更改自己的数据集名称）</h4><p>cyclegan训练命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python train.py --dataroot ./datasets/xxx --name xxx_cyclegan --model cycle_gan<br></code></pre></td></tr></table></figure><p>pix2pix训练命令（AtoB表示由A数据集训练生成B数据集）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python train.py --dataroot ./datasets/xxx --name xxx_pix2pix --model pix2pix --direction AtoB<br></code></pre></td></tr></table></figure><h4 id="测试训练好的模型"><a href="#测试训练好的模型" class="headerlink" title="测试训练好的模型"></a>测试训练好的模型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python test.py --dataroot ./datasets/xxx --name xxx_pix2pix --model pix2pix<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CycleGAN and pix2pix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda 虚拟环境配置</title>
    <link href="/2023/01/14/conda-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/01/14/conda-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>以管理员的身份打开anaconda prompt</p><p>查看显卡支持的cuda版本<br>下载安装对应版本的cuda、cuDNN</p><p>CUDA软件（官网地址）：<a href="https://developer.nvidia.com/cuda-11.0-download-archive?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exenetwork">https://developer.nvidia.com/cuda-11.0-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exenetwork</a><br>cuDNN（官网地址）：<a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/8.0.2.39/11.0_20200724/cudnn-11.0-windows-x64-v8.0.2.39.zip">https://developer.nvidia.com/compute/machine-learning/cudnn/secure/8.0.2.39/11.0_20200724/cudnn-11.0-windows-x64-v8.0.2.39.zip</a></p><p>创建虚拟环境路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --prefix D:\anaconda\conda\envs<br></code></pre></td></tr></table></figure><p>激活虚拟环境路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate D:\anaconda\conda\envs<br></code></pre></td></tr></table></figure><p>查看虚拟环境列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env list<br></code></pre></td></tr></table></figure><p>创建虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n xxx python=3.8<br></code></pre></td></tr></table></figure><p>激活虚拟环境（在项目根路径下打开cmd）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate xxx<br></code></pre></td></tr></table></figure><p>退出当前环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda deactivate<br></code></pre></td></tr></table></figure><p>删除虚拟环境（xxx为虚拟环境名）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda remove -n xxx --all<br></code></pre></td></tr></table></figure><p>安装对应版本的python（创建虚拟环境时没有指定python时需要安装）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install python==3.8.5<br></code></pre></td></tr></table></figure><p>安装对应版本pytorch（要和cuda的版本对应）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install torch===1.7.1+cu110 torchvision===0.8.2+cu110 torchaudio===0.7.2 -f https://download.pytorch.org/whl/torch_stable.html -i https://pypi.douban.com/simple/<br></code></pre></td></tr></table></figure><p>安装程序所需依赖（在requirement.txt所在文件夹路径执行cmd命令）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>查看已安装依赖包列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda list<br></code></pre></td></tr></table></figure><p>释放GPU内存，清除GPU中的张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>torch.cuda.empty_cache()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码复现：Bringing Old Photos Back to Life</title>
    <link href="/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ABringing-Old-Photos-Back-to-Life/"/>
    <url>/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ABringing-Old-Photos-Back-to-Life/</url>
    
    <content type="html"><![CDATA[<p>不知道为什么cuda报错，先用CPU运行</p><p>修复带划痕&#x2F;有破损的老照片（使用 RTX 2080Ti 最大可修复 512x512 的照片）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py --input_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\test_images\old_w_scratch --output_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\output --with_scratch --GPU -1<br></code></pre></td></tr></table></figure><p>改进老照片的色彩或清晰度（使用 RTX 2080Ti 最大可改善 1024x1024 的照片）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python run.py --input_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\test_images\old --output_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\output --GPU -1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Old Photos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python运算符</title>
    <link href="/2023/01/14/Python%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/01/14/Python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h1><ul><li>算数运算符</li><li>赋值运算符</li><li>复合赋值运算符</li><li>比较运算符</li><li>逻辑运算符</li></ul><h2 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符"></a>1. 算数运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td>1 + 1 输出结果为 2</td></tr><tr><td align="center">-</td><td align="center">减</td><td>1-1 输出结果为 0</td></tr><tr><td align="center">*</td><td align="center">乘</td><td>2 * 2 输出结果为 4</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td><td>10 &#x2F; 2 输出结果为 5</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">整除</td><td>9 &#x2F;&#x2F; 4 输出结果为2</td></tr><tr><td align="center">%</td><td align="center">取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td align="center">**</td><td align="center">指数</td><td>2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr><tr><td align="center">()</td><td align="center">小括号</td><td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><ul><li>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li></ul><h2 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2. 赋值运算符"></a>2. 赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr></tbody></table><ul><li>单个变量赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><ul><li>多个变量赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">num1, float1, str1 = <span class="hljs-number">10</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-built_in">print</span>(num1)<br><span class="hljs-built_in">print</span>(float1)<br><span class="hljs-built_in">print</span>(str1)<br></code></pre></td></tr></table></figure><ul><li>多变量赋相同值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><h2 id="3-复合赋值运算符"><a href="#3-复合赋值运算符" class="headerlink" title="3. 复合赋值运算符"></a>3. 复合赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等价于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等价于 c &#x3D; c- a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等价于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取余赋值运算符</td><td>c %&#x3D; a 等价于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c ** &#x3D; a 等价于 c &#x3D; c ** a</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br>a += <span class="hljs-number">1</span><br><span class="hljs-comment"># 输出101  a = a + 1,最终a = 100 + 1</span><br><span class="hljs-built_in">print</span>(a)<br><br>b = <span class="hljs-number">2</span><br>b *= <span class="hljs-number">3</span><br><span class="hljs-comment"># 输出6  b = b * 3,最终b = 2 * 3</span><br><span class="hljs-built_in">print</span>(b)<br><br>c = <span class="hljs-number">10</span><br>c += <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br><span class="hljs-comment"># 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3</span><br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h2 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4. 比较运算符"></a>4. 比较运算符</h2><p>比较运算符也叫关系运算符， 通常用来判断。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如a&#x3D;3,b&#x3D;3，则（a &#x3D;&#x3D; b) 为 True</td></tr><tr><td>!&#x3D;</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如a&#x3D;3,b&#x3D;3，则（a &#x3D;&#x3D; b) 为 True如a&#x3D;1,b&#x3D;3，则(a !&#x3D; b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a&#x3D;7,b&#x3D;3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a&#x3D;7,b&#x3D;3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;&#x3D;</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a&#x3D;7,b&#x3D;3，则(a &lt; b) 为 False如a&#x3D;3,b&#x3D;3，则(a &gt;&#x3D; b) 为 True</td></tr><tr><td>&lt;&#x3D;</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a&#x3D;3,b&#x3D;3，则(a &lt;&#x3D; b) 为 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">7</span><br>b = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(a == b)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a != b)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a &lt; b)   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a &gt; b)   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a &lt;= b)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a &gt;= b)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5. 逻辑运算符"></a>5. 逻辑运算符</h2><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br>c = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>((a &lt; b) <span class="hljs-keyword">and</span> (b &lt; c))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>((a &gt; b) <span class="hljs-keyword">and</span> (b &lt; c))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>((a &gt; b) <span class="hljs-keyword">or</span> (b &lt; c))   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> (a &gt; b))          <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="5-1-拓展"><a href="#5-1-拓展" class="headerlink" title="5.1 拓展"></a>5.1 拓展</h3><p>数字之间的逻辑运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br>b = <span class="hljs-number">1</span><br>c = <span class="hljs-number">2</span><br><br><span class="hljs-comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">and</span> b)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">and</span> a)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">and</span> c)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(c <span class="hljs-keyword">and</span> a)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">and</span> c)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(c <span class="hljs-keyword">and</span> b)  <span class="hljs-comment"># 1</span><br><br><span class="hljs-comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">or</span> b)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">or</span> c)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">or</span> c)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>算数运算的优先级<ul><li>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li></ul></li><li>赋值运算符<ul><li>&#x3D;</li></ul></li><li>复合赋值运算符<ul><li>+&#x3D;</li><li>-&#x3D;</li><li>优先级<ol><li>先算复合赋值运算符右侧的表达式</li><li>再算复合赋值运算的算数运算</li><li>最后算赋值运算</li></ol></li></ul></li><li>比较运算符<ul><li>判断相等： &#x3D;&#x3D; </li><li>大于等于： &gt;&#x3D;</li><li>小于等于：&lt;&#x3D;</li><li>不等于： !&#x3D;</li></ul></li><li>逻辑运算符<ul><li>与： and</li><li>或：or</li><li>非：not</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>运算符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python转换数据类型</title>
    <link href="/2023/01/14/Python%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/01/14/Python%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一-转换数据类型的作用"><a href="#一-转换数据类型的作用" class="headerlink" title="一. 转换数据类型的作用"></a>一. 转换数据类型的作用</h1><p>问：input()接收用户输入的数据都是字符串类型，如果用户输入1，想得到整型该如何操作？</p><p>答：转换数据类型即可，即将字符串类型转换成整型。</p><h1 id="二-转换数据类型的函数"><a href="#二-转换数据类型的函数" class="headerlink" title="二. 转换数据类型的函数"></a>二. 转换数据类型的函数</h1><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;int(x [,base ])&#x3D;&#x3D;</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">&#x3D;&#x3D;float(x )&#x3D;&#x3D;</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">complex(real [,imag ])</td><td align="center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td align="center">&#x3D;&#x3D;str(x )&#x3D;&#x3D;</td><td align="center">将对象 x 转换为字符串</td></tr><tr><td align="center">repr(x )</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center">&#x3D;&#x3D;eval(str )&#x3D;&#x3D;</td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="center">&#x3D;&#x3D;tuple(s )&#x3D;&#x3D;</td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center">&#x3D;&#x3D;list(s )&#x3D;&#x3D;</td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">chr(x )</td><td align="center">将一个整数转换为一个Unicode字符</td></tr><tr><td align="center">ord(x )</td><td align="center">将一个字符转换为它的ASCII整数值</td></tr><tr><td align="center">hex(x )</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x )</td><td align="center">将一个整数转换为一个八进制字符串</td></tr><tr><td align="center">bin(x )</td><td align="center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><h1 id="三-快速体验"><a href="#三-快速体验" class="headerlink" title="三. 快速体验"></a>三. 快速体验</h1><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 接收用户输入</span><br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的幸运数字：&#x27;</span>)<br><br><span class="hljs-comment"># 2. 打印结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;您的幸运数字是<span class="hljs-subst">&#123;num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-comment"># 3. 检测接收到的用户输入的数据类型 -- str类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(num))<br><br><span class="hljs-comment"># 4. 转换数据类型为整型 -- int类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>(num)))<br></code></pre></td></tr></table></figure><h1 id="四-实验"><a href="#四-实验" class="headerlink" title="四. 实验"></a>四. 实验</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. float() -- 转换成浮点型</span><br>num1 = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(num1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">float</span>(num1)))<br><br><span class="hljs-comment"># 2. str() -- 转换成字符串类型</span><br>num2 = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(num2)))<br><br><span class="hljs-comment"># 3. tuple() -- 将一个序列转换成元组</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(list1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">tuple</span>(list1)))<br><br><br><span class="hljs-comment"># 4. list() -- 将一个序列转换成列表</span><br>t1 = (<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(t1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">list</span>(t1)))<br><br><span class="hljs-comment"># 5. eval() -- 将字符串中的数据转换成Python表达式原本类型</span><br>str1 = <span class="hljs-string">&#x27;10&#x27;</span><br>str2 = <span class="hljs-string">&#x27;[1, 2, 3]&#x27;</span><br>str3 = <span class="hljs-string">&#x27;(1000, 2000, 3000)&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str1)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str2)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str3)))<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>转换数据类型常用的函数<ul><li>int()</li><li>float()</li><li>str()</li><li>list()</li><li>tuple()</li><li>eval()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>转换数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python输入</title>
    <link href="/2023/01/14/Python%E8%BE%93%E5%85%A5/"/>
    <url>/2023/01/14/Python%E8%BE%93%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="一-输入"><a href="#一-输入" class="headerlink" title="一. 输入"></a>一. 输入</h1><p>在Python中，程序接收用户输入的数据的功能即是输入。</p><h2 id="1-2-输入的语法"><a href="#1-2-输入的语法" class="headerlink" title="1.2 输入的语法"></a>1.2 输入的语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;提示信息&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="1-3-输入的特点"><a href="#1-3-输入的特点" class="headerlink" title="1.3 输入的特点"></a>1.3 输入的特点</h2><ul><li>当程序执行到<code>input</code>，等待用户输入，输入完成之后才继续向下执行。</li><li>在Python中，<code>input</code>接收用户输入后，一般存储到变量，方便使用。</li><li>在Python中，<code>input</code>会把接收到的任意用户输入的数据都当做字符串处理。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的密码：&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的密码是<span class="hljs-subst">&#123;password&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(password))<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>输入功能<ul><li>input(‘提示文字’)</li></ul></li><li>输入的特点<ul><li>一般将input接收的数据存储到变量</li><li>input接收的任何数据默认都是字符串数据类型</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>输入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python输出</title>
    <link href="/2023/01/14/Python%E8%BE%93%E5%87%BA/"/>
    <url>/2023/01/14/Python%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>作用：程序输出内容给用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)<br><br>age = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(age)<br><br><span class="hljs-comment"># 需求：输出“今年我的年龄是18岁”</span><br></code></pre></td></tr></table></figure><h1 id="一-格式化输出"><a href="#一-格式化输出" class="headerlink" title="一.  格式化输出"></a>一.  格式化输出</h1><p>所谓的格式化输出即按照一定的格式输出内容。</p><h3 id="1-1-格式化符号"><a href="#1-1-格式化符号" class="headerlink" title="1.1 格式化符号"></a>1.1 格式化符号</h3><table><thead><tr><th align="center">格式符号</th><th align="center">转换</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;%s&#x3D;&#x3D;</td><td align="center">字符串</td></tr><tr><td align="center">&#x3D;&#x3D;%d&#x3D;&#x3D;</td><td align="center">有符号的十进制整数</td></tr><tr><td align="center">&#x3D;&#x3D;%f&#x3D;&#x3D;</td><td align="center">浮点数</td></tr><tr><td align="center">%c</td><td align="center">字符</td></tr><tr><td align="center">%u</td><td align="center">无符号十进制整数</td></tr><tr><td align="center">%o</td><td align="center">八进制整数</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数（小写ox）</td></tr><tr><td align="center">%X</td><td align="center">十六进制整数（大写OX）</td></tr><tr><td align="center">%e</td><td align="center">科学计数法（小写’e’）</td></tr><tr><td align="center">%E</td><td align="center">科学计数法（大写’E’）</td></tr><tr><td align="center">%g</td><td align="center">%f和%e的简写</td></tr><tr><td align="center">%G</td><td align="center">%f和%E的简写</td></tr></tbody></table><blockquote><p>技巧</p></blockquote><ul><li>%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</li><li>%.2f，表示小数点后显示的小数位数。</li></ul><h3 id="1-2-体验"><a href="#1-2-体验" class="headerlink" title="1.2 体验"></a>1.2 体验</h3><p>格式化字符串除了%s，还可以写为<code>f&#39;&#123;表达式&#125;&#39;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">18</span> <br>name = <span class="hljs-string">&#x27;TOM&#x27;</span><br>weight = <span class="hljs-number">75.5</span><br>student_id = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 我的名字是TOM</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s&#x27;</span> % name)<br><br><span class="hljs-comment"># 我的学号是0001</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的学号是%4d&#x27;</span> % student_id)<br><br><span class="hljs-comment"># 我的体重是75.50公斤</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的体重是%.2f公斤&#x27;</span> % weight)<br><br><span class="hljs-comment"># 我的名字是TOM，今年18岁了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s，今年%d岁了&#x27;</span> % (name, age))<br><br><span class="hljs-comment"># 我的名字是TOM，明年19岁了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s，明年%d岁了&#x27;</span> % (name, age + <span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># 我的名字是TOM，明年19岁了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;我的名字是<span class="hljs-subst">&#123;name&#125;</span>, 明年<span class="hljs-subst">&#123;age + <span class="hljs-number">1</span>&#125;</span>岁了&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读。</p></blockquote><h3 id="1-3-转义字符"><a href="#1-3-转义字符" class="headerlink" title="1.3 转义字符"></a>1.3 转义字符</h3><ul><li><code>\n</code>：换行。</li><li><code>\t</code>：制表符，一个tab键（4个空格）的距离。</li></ul><h3 id="1-4-结束符"><a href="#1-4-结束符" class="headerlink" title="1.4 结束符"></a>1.4 结束符</h3><blockquote><p>想一想，为什么两个print会换行输出？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输出的内容&#x27;</span>, end=<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>在Python中，print()， 默认自带<code>end=&quot;\n&quot;</code>这个换行结束符，所以导致每两个<code>print</code>直接会换行展示，用户可以按需求更改结束符。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>格式化符号<ul><li>%s：格式化输出字符串</li><li>%d：格式化输出整数</li><li>%f：格式化输出浮点数</li></ul></li><li>f-字符串<ul><li>f’{表达式}’</li></ul></li><li>转义字符<ul><li>\n：换行</li><li>\t：制表符</li></ul></li><li>print结束符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;内容&#x27;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>输出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python注释</title>
    <link href="/2023/01/14/Python%E6%B3%A8%E9%87%8A/"/>
    <url>/2023/01/14/Python%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="注释的分类及语法"><a href="#注释的分类及语法" class="headerlink" title="注释的分类及语法"></a>注释的分类及语法</h1><p>注释分为两类：&#x3D;&#x3D;单行注释&#x3D;&#x3D; 和 &#x3D;&#x3D;多行注释&#x3D;&#x3D;。</p><ul><li>单行注释</li></ul><p>只能注释一行内容，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注释内容</span><br></code></pre></td></tr></table></figure><ul><li>多行注释</li></ul><p>可以注释多行内容，一般用在注释一段代码的情况， 语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">第一行注释</span><br><span class="hljs-string">第二行注释</span><br><span class="hljs-string">第三行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">注释1</span><br><span class="hljs-string">注释2</span><br><span class="hljs-string">注释3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>快捷键： &#x3D;&#x3D;ctrl + &#x2F;&#x3D;&#x3D;</p></blockquote><h2 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h2><ul><li>单行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输出hello world</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)  <span class="hljs-comment"># 输出(简单的说明可以放到一行代码的后面，一般习惯代码后面添加两个空格再书写注释文字)</span><br></code></pre></td></tr></table></figure><ul><li>多行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    下面三行都是输出的作用，输出内容分别是：</span><br><span class="hljs-string">    hello Python</span><br><span class="hljs-string">    hello itcast</span><br><span class="hljs-string">    hello itheima</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itcast&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itheima&#x27;</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    下面三行都是输出的作用，输出内容分别是：</span><br><span class="hljs-string">    hello Python</span><br><span class="hljs-string">    hello itcast</span><br><span class="hljs-string">    hello itheima</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itcast&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itheima&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：解释器不执行任何的注释内容。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>注释的作用</li></ul><p>用人类熟悉的语言对代码进行解释说明，方便后期维护。</p><ul><li>注释的分类<ul><li>单行： <code># 注释内容</code>，快捷键ctrl+&#x2F;</li><li>多行：<code>&quot;&quot;&quot; 注释内容 &quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39; 注释内容 &#39;&#39;&#39;</code></li></ul></li><li>解释器不执行注释内容</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>注释</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>article title</title>
    <link href="/2023/01/13/article-title/"/>
    <url>/2023/01/13/article-title/</url>
    
    <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><p>这是一张图片<br><img src="/2023/01/13/article-title/KDA.jpg"></p><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><p>这是一串代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arry[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>就到这吧</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/13/hello-world/"/>
    <url>/2023/01/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
