<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>推导式</title>
    <link href="/2023/01/16/%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <url>/2023/01/16/%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>列表推导式</li><li>字典推导式</li><li>集合推导式</li></ul><h1 id="一-列表推导式"><a href="#一-列表推导式" class="headerlink" title="一. 列表推导式"></a>一. 列表推导式</h1><p>作用：用一个表达式创建一个有规律的列表或控制一个有规律列表。</p><p>列表推导式又叫列表生成式。</p><h2 id="1-1-快速体验"><a href="#1-1-快速体验" class="headerlink" title="1.1 快速体验"></a>1.1 快速体验</h2><p>需求：创建一个0-10的列表。</p><ul><li>while循环实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 准备一个空列表</span><br>list1 = []<br><br><span class="hljs-comment"># 2. 书写循环，依次追加数字到空列表list1中</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">10</span>:<br>    list1.append(i)<br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>for循环实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    list1.append(i)<br><br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>列表推导式实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><h2 id="1-2-带if的列表推导式"><a href="#1-2-带if的列表推导式" class="headerlink" title="1.2 带if的列表推导式"></a>1.2 带if的列表推导式</h2><p>需求：创建0-10的偶数列表</p><ul><li>方法一：range()步长实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)]<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>方法二：if实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><h2 id="1-3-多个for循环实现列表推导式"><a href="#1-3-多个for循环实现列表推导式" class="headerlink" title="1.3 多个for循环实现列表推导式"></a>1.3 多个for循环实现列表推导式</h2><p>需求：创建列表如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]<br></code></pre></td></tr></table></figure><ul><li>代码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [(i, j) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><h1 id="二-字典推导式"><a href="#二-字典推导式" class="headerlink" title="二. 字典推导式"></a>二. 字典推导式</h1><p>思考：如果有如下两个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;gender&#x27;</span>]<br>list2 = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;man&#x27;</span>]<br></code></pre></td></tr></table></figure><p>如何快速合并为一个字典？</p><p>答：字典推导式</p><p>字典推导式作用：快速合并列表为字典或提取字典中目标数据。</p><h1 id="2-1-快速体验"><a href="#2-1-快速体验" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h1><ol><li>创建一个字典：字典key是1-5数字，value是这个数字的2次方。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;i: i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)&#125;<br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将两个列表合并为一个字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;gender&#x27;</span>]<br>list2 = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;man&#x27;</span>]<br><br>dict1 = &#123;list1[i]: list2[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(list1))&#125;<br><span class="hljs-built_in">print</span>(dict1)<br></code></pre></td></tr></table></figure><ol start="3"><li>提取字典中目标数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">counts = &#123;<span class="hljs-string">&#x27;MBP&#x27;</span>: <span class="hljs-number">268</span>, <span class="hljs-string">&#x27;HP&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;DELL&#x27;</span>: <span class="hljs-number">201</span>, <span class="hljs-string">&#x27;Lenovo&#x27;</span>: <span class="hljs-number">199</span>, <span class="hljs-string">&#x27;acer&#x27;</span>: <span class="hljs-number">99</span>&#125;<br><br><span class="hljs-comment"># 需求：提取上述电脑数量大于等于200的字典数据</span><br>count1 = &#123;key: value <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> counts.items() <span class="hljs-keyword">if</span> value &gt;= <span class="hljs-number">200</span>&#125;<br><span class="hljs-built_in">print</span>(count1)  <span class="hljs-comment"># &#123;&#x27;MBP&#x27;: 268, &#x27;DELL&#x27;: 201&#125;</span><br></code></pre></td></tr></table></figure><h1 id="三-集合推导式"><a href="#三-集合推导式" class="headerlink" title="三. 集合推导式"></a>三. 集合推导式</h1><p>需求：创建一个集合，数据为下方列表的2次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>set1 = &#123;i ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1&#125;<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;1, 4&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：集合有数据去重功能。</p></blockquote><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul><li>推导式的作用：简化代码</li><li>推导式写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表推导式</span><br>[xx <span class="hljs-keyword">for</span> xx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>()]<br><br><span class="hljs-comment"># 字典推导式</span><br>&#123;xx1: xx2 <span class="hljs-keyword">for</span> ... <span class="hljs-keyword">in</span> ...&#125;<br><br><span class="hljs-comment"># 集合推导式</span><br>&#123;xx <span class="hljs-keyword">for</span> xx <span class="hljs-keyword">in</span> ...&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>推导式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公共操作</title>
    <link href="/2023/01/16/%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/01/16/%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="课程：公共操作"><a href="#课程：公共操作" class="headerlink" title="课程：公共操作"></a>课程：公共操作</h1><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>运算符</li><li>公共方法</li><li>容器类型转换</li></ul><h1 id="一-运算符"><a href="#一-运算符" class="headerlink" title="一. 运算符"></a>一. 运算符</h1><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">支持的容器类型</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">合并</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">*</td><td align="center">复制</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">in</td><td align="center">元素是否存在</td><td align="center">字符串、列表、元组、字典</td></tr><tr><td align="center">not in</td><td align="center">元素是否不存在</td><td align="center">字符串、列表、元组、字典</td></tr></tbody></table><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1 +"></a>1.1 +</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串 </span><br>str1 = <span class="hljs-string">&#x27;aa&#x27;</span><br>str2 = <span class="hljs-string">&#x27;bb&#x27;</span><br>str3 = str1 + str2<br><span class="hljs-built_in">print</span>(str3)  <span class="hljs-comment"># aabb</span><br><br><br><span class="hljs-comment"># 2. 列表 </span><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>list2 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>]<br>list3 = list1 + list2<br><span class="hljs-built_in">print</span>(list3)  <span class="hljs-comment"># [1, 2, 10, 20]</span><br><br><span class="hljs-comment"># 3. 元组 </span><br>t1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>t2 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br>t3 = t1 + t2<br><span class="hljs-built_in">print</span>(t3)  <span class="hljs-comment"># (10, 20, 100, 200)</span><br></code></pre></td></tr></table></figure><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2 *"></a>1.2 *</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">10</span>)  <span class="hljs-comment"># ----------</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-built_in">print</span>(list1 * <span class="hljs-number">4</span>)  <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span><br><br><span class="hljs-comment"># 3. 元组</span><br>t1 = (<span class="hljs-string">&#x27;world&#x27;</span>,)<br><span class="hljs-built_in">print</span>(t1 * <span class="hljs-number">4</span>)  <span class="hljs-comment"># (&#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;)</span><br></code></pre></td></tr></table></figure><h2 id="1-3-in或not-in"><a href="#1-3-in或not-in" class="headerlink" title="1.3 in或not in"></a>1.3 in或not in</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcd&#x27;</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcd&#x27;</span>)  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> list1)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> list1)  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 3. 元组</span><br>t1 = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;aa&#x27;</span> <span class="hljs-keyword">in</span> t1)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;aa&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> t1)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h1 id="二-公共方法"><a href="#二-公共方法" class="headerlink" title="二. 公共方法"></a>二. 公共方法</h1><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>del 或 del()</td><td>删除</td></tr><tr><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>range(start, end, step)</td><td>生成从start到end的数字，步长为 step，供for循环使用</td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</td></tr></tbody></table><h2 id="2-1-len"><a href="#2-1-len" class="headerlink" title="2.1 len()"></a>2.1 len()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br>str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(str1))  <span class="hljs-comment"># 7</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list1))  <span class="hljs-comment"># 4</span><br><br><span class="hljs-comment"># 3. 元组</span><br>t1 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(t1))  <span class="hljs-comment"># 5</span><br><br><span class="hljs-comment"># 4. 集合</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s1))  <span class="hljs-comment"># 3</span><br><br><span class="hljs-comment"># 5. 字典</span><br>dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Rose&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dict1))  <span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><h2 id="2-2-del"><a href="#2-2-del" class="headerlink" title="2.2 del()"></a>2.2 del()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br>str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-keyword">del</span> str1<br><span class="hljs-built_in">print</span>(str1)<br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-keyword">del</span>(list1[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(list1)  <span class="hljs-comment"># [20, 30, 40]</span><br></code></pre></td></tr></table></figure><h2 id="2-3-max"><a href="#2-3-max" class="headerlink" title="2.3 max()"></a>2.3 max()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br>str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(str1))  <span class="hljs-comment"># g</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(list1))  <span class="hljs-comment"># 40</span><br></code></pre></td></tr></table></figure><h2 id="2-4-min"><a href="#2-4-min" class="headerlink" title="2.4 min()"></a>2.4 min()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br>str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(str1))  <span class="hljs-comment"># a</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(list1))  <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><h2 id="2-5-range"><a href="#2-5-range" class="headerlink" title="2.5 range()"></a>2.5 range()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 2 3 4 5 6 7 8 9</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-comment"># 1 3 5 7 9</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-comment"># 0 1 2 3 4 5 6 7 8 9</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><blockquote><p>注意：range()生成的序列不包含end数字。</p></blockquote><h2 id="2-6-enumerate"><a href="#2-6-enumerate" class="headerlink" title="2.6 enumerate()"></a>2.6 enumerate()</h2><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">enumerate</span>(可遍历对象, start=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：start参数用来设置遍历数据的下标的起始值，默认为0。</p></blockquote><ul><li>快速体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> index, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1, start=<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;下标是<span class="hljs-subst">&#123;index&#125;</span>, 对应的字符是<span class="hljs-subst">&#123;char&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/image-20190213115919040.png"></p><h1 id="三-容器类型转换"><a href="#三-容器类型转换" class="headerlink" title="三. 容器类型转换"></a>三. 容器类型转换</h1><h2 id="3-1-tuple"><a href="#3-1-tuple" class="headerlink" title="3.1 tuple()"></a>3.1 tuple()</h2><p>作用：将某个序列转换成元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>]<br>s1 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(list1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(s1))<br></code></pre></td></tr></table></figure><h2 id="3-2-list"><a href="#3-2-list" class="headerlink" title="3.2 list()"></a>3.2 list()</h2><p>作用：将某个序列转换成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)<br>s1 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(t1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(s1))<br></code></pre></td></tr></table></figure><h2 id="3-3-set"><a href="#3-3-set" class="headerlink" title="3.3 set()"></a>3.3 set()</h2><p>作用：将某个序列转换成集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>]<br>t1 = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(list1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(t1))<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><pre><code class="hljs"> 1. 集合可以快速完成列表去重 2. 集合不支持下标</code></pre><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul><li>运算符<ul><li><ul><li></li></ul></li><li>in &#x2F; not in</li></ul></li><li>公共方法<ul><li>len()</li><li>del()</li><li>range()</li><li>enumerate()</li></ul></li><li>数据类型转换<ul><li>tuple()</li><li>list()</li><li>set()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>公共操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/2023/01/16/%E9%9B%86%E5%90%88/"/>
    <url>/2023/01/16/%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>创建集合</li><li>集合数据的特点</li><li>集合的常见操作</li></ul><h1 id="一-创建集合"><a href="#一-创建集合" class="headerlink" title="一. 创建集合"></a>一. 创建集合</h1><p>创建集合使用<code>&#123;&#125;</code>或<code>set()</code>， 但是如果要创建空集合只能使用<code>set()</code>，因为<code>&#123;&#125;</code>用来创建空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-built_in">print</span>(s1)<br><br>s2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-built_in">print</span>(s2)<br><br>s3 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;abcdefg&#x27;</span>)<br><span class="hljs-built_in">print</span>(s3)<br><br>s4 = <span class="hljs-built_in">set</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(s4))  <span class="hljs-comment"># set</span><br><br>s5 = &#123;&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(s5))  <span class="hljs-comment"># dict</span><br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E9%9B%86%E5%90%88/image-20190318104620690.png"></p><blockquote><p>特点：</p><ol><li>集合可以去掉重复数据；</li><li>集合数据是无序的，故不支持下标</li></ol></blockquote><h1 id="二-集合常见操作方法"><a href="#二-集合常见操作方法" class="headerlink" title="二. 集合常见操作方法"></a>二. 集合常见操作方法</h1><h2 id="2-1-增加数据"><a href="#2-1-增加数据" class="headerlink" title="2.1 增加数据"></a>2.1 增加数据</h2><ul><li>add()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br>s1.add(<span class="hljs-number">100</span>)<br>s1.add(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s1)  <span class="hljs-comment"># &#123;100, 10, 20&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p></blockquote><ul><li>update(), 追加的数据是序列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br><span class="hljs-comment"># s1.update(100)  # 报错</span><br>s1.update([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>])<br>s1.update(<span class="hljs-string">&#x27;abc&#x27;</span>)<br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E9%9B%86%E5%90%88/image-20190318121424514.png"></p><h2 id="2-2-删除数据"><a href="#2-2-删除数据" class="headerlink" title="2.2 删除数据"></a>2.2 删除数据</h2><ul><li>remove()，删除集合中的指定数据，如果数据不存在则报错。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br><br>s1.remove(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s1)<br><br>s1.remove(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 报错</span><br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><ul><li>discard()，删除集合中的指定数据，如果数据不存在也不会报错。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br><br>s1.discard(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s1)<br><br>s1.discard(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><ul><li>pop()，随机删除集合中的某个数据，并返回这个数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><br>del_num = s1.pop()<br><span class="hljs-built_in">print</span>(del_num)<br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><h2 id="2-3-查找数据"><a href="#2-3-查找数据" class="headerlink" title="2.3 查找数据"></a>2.3 查找数据</h2><ul><li>in：判断数据在集合序列</li><li>not in：判断数据不在集合序列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> s1)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s1)<br></code></pre></td></tr></table></figure><h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h1><ul><li><p>创建集合</p><ul><li>有数据集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;数据<span class="hljs-number">1</span>, 数据<span class="hljs-number">2</span>, ...&#125;<br></code></pre></td></tr></table></figure><ul><li>无数据集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-built_in">set</span>()<br></code></pre></td></tr></table></figure></li><li><p>常见操作</p><ul><li>增加数据<ul><li>add()</li><li>update()</li></ul></li><li>删除数据<ul><li>remove()</li><li>discard()</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字典</title>
    <link href="/2023/01/16/%E5%AD%97%E5%85%B8/"/>
    <url>/2023/01/16/%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>字典的应用场景</li><li>创建字典的语法</li><li>字典常见操作</li><li>字典的循环遍历</li></ul><h1 id="一-字典的应用场景"><a href="#一-字典的应用场景" class="headerlink" title="一. 字典的应用场景"></a>一. 字典的应用场景</h1><p>思考1： 如果有多个数据，例如：’Tom’, ‘男’, 20，如何快速存储？</p><p>答：列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><p>思考2：如何查找到数据’Tom’？</p><p>答：查找到下标为0的数据即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>思考3：如果将来数据顺序发生变化，如下所示，还能用<code>list1[0]</code>访问到数据’Tom’吗？。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>]<br></code></pre></td></tr></table></figure><p>答：不能，数据’Tom’此时下标为2。</p><p>思考4：数据顺序发生变化，每个数据的下标也会随之变化，如何保证数据顺序变化前后能使用同一的标准查找数据呢？</p><p>答：字典，字典里面的数据是以&#x3D;&#x3D;键值对&#x3D;&#x3D;形式出现，字典数据和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，只需要按照对应的键的名字查找数据即可。</p><h1 id="二-创建字典的语法"><a href="#二-创建字典的语法" class="headerlink" title="二. 创建字典的语法"></a>二. 创建字典的语法</h1><p>字典特点：</p><ul><li>符号为&#x3D;&#x3D;大括号&#x3D;&#x3D;</li><li>数据为&#x3D;&#x3D;键值对&#x3D;&#x3D;形式出现</li><li>各个键值对之间用&#x3D;&#x3D;逗号&#x3D;&#x3D;隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 有数据字典</span><br>dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br><span class="hljs-comment"># 空字典</span><br>dict2 = &#123;&#125;<br><br>dict3 = <span class="hljs-built_in">dict</span>()<br></code></pre></td></tr></table></figure><blockquote><p>注意：一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</p></blockquote><h1 id="三-字典常见操作"><a href="#三-字典常见操作" class="headerlink" title="三. 字典常见操作"></a>三. 字典常见操作</h1><h2 id="3-1-增"><a href="#3-1-增" class="headerlink" title="3.1 增"></a>3.1 增</h2><p>写法：&#x3D;&#x3D;字典序列[key] &#x3D; 值&#x3D;&#x3D;</p><blockquote><p>注意：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br>dict1[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;Rose&#x27;</span><br><span class="hljs-comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(dict1)<br><br>dict1[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-number">110</span><br><br><span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;, &#x27;id&#x27;: 110&#125;</span><br><span class="hljs-built_in">print</span>(dict1)<br></code></pre></td></tr></table></figure><blockquote><p>注意：字典为可变类型。</p></blockquote><h2 id="3-2-删"><a href="#3-2-删" class="headerlink" title="3.2 删"></a>3.2 删</h2><ul><li>del() &#x2F; del：删除字典或删除字典中指定键值对。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br><span class="hljs-keyword">del</span> dict1[<span class="hljs-string">&#x27;gender&#x27;</span>]<br><span class="hljs-comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20&#125;</span><br><span class="hljs-built_in">print</span>(dict1)<br></code></pre></td></tr></table></figure><ul><li>clear()：清空字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br>dict1.clear()<br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-3-改"><a href="#3-3-改" class="headerlink" title="3.3 改"></a>3.3 改</h2><p>写法：&#x3D;&#x3D;字典序列[key] &#x3D; 值&#x3D;&#x3D;</p><blockquote><p>注意：如果key存在则修改这个key对应的值 ；如果key不存在则新增此键值对。</p></blockquote><h2 id="3-4-查"><a href="#3-4-查" class="headerlink" title="3.4 查"></a>3.4 查</h2><h3 id="3-4-1-key值查找"><a href="#3-4-1-key值查找" class="headerlink" title="3.4.1 key值查找"></a>3.4.1 key值查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1[<span class="hljs-string">&#x27;name&#x27;</span>])  <span class="hljs-comment"># Tom</span><br><span class="hljs-built_in">print</span>(dict1[<span class="hljs-string">&#x27;id&#x27;</span>])  <span class="hljs-comment"># 报错</span><br></code></pre></td></tr></table></figure><blockquote><p>如果当前查找的key存在，则返回对应的值；否则则报错。</p></blockquote><h3 id="3-4-2-get"><a href="#3-4-2-get" class="headerlink" title="3.4.2 get()"></a>3.4.2 get()</h3><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字典序列.get(key, 默认值)<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</p></blockquote><ul><li>快速体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1.get(<span class="hljs-string">&#x27;name&#x27;</span>))  <span class="hljs-comment"># Tom</span><br><span class="hljs-built_in">print</span>(dict1.get(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">110</span>))  <span class="hljs-comment"># 110</span><br><span class="hljs-built_in">print</span>(dict1.get(<span class="hljs-string">&#x27;id&#x27;</span>))  <span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><h3 id="3-4-3-keys"><a href="#3-4-3-keys" class="headerlink" title="3.4.3 keys()"></a>3.4.3 keys()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1.keys())  <span class="hljs-comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span><br></code></pre></td></tr></table></figure><h3 id="3-4-4-values"><a href="#3-4-4-values" class="headerlink" title="3.4.4 values()"></a>3.4.4 values()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1.values())  <span class="hljs-comment"># dict_values([&#x27;Tom&#x27;, 20, &#x27;男&#x27;])</span><br></code></pre></td></tr></table></figure><h3 id="3-4-5-items"><a href="#3-4-5-items" class="headerlink" title="3.4.5 items()"></a>3.4.5 items()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1.items())  <span class="hljs-comment"># dict_items([(&#x27;name&#x27;, &#x27;Tom&#x27;), (&#x27;age&#x27;, 20), (&#x27;gender&#x27;, &#x27;男&#x27;)])</span><br></code></pre></td></tr></table></figure><h1 id="四-字典的循环遍历"><a href="#四-字典的循环遍历" class="headerlink" title="四. 字典的循环遍历"></a>四. 字典的循环遍历</h1><h2 id="4-1-遍历字典的key"><a href="#4-1-遍历字典的key" class="headerlink" title="4.1 遍历字典的key"></a>4.1 遍历字典的key</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dict1.keys():<br>    <span class="hljs-built_in">print</span>(key)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%AD%97%E5%85%B8/image-20190212103905553.png"></p><h2 id="4-2-遍历字典的value"><a href="#4-2-遍历字典的value" class="headerlink" title="4.2 遍历字典的value"></a>4.2 遍历字典的value</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> dict1.values():<br>    <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%AD%97%E5%85%B8/image-20190212103957777.png"></p><h2 id="4-3-遍历字典的元素"><a href="#4-3-遍历字典的元素" class="headerlink" title="4.3 遍历字典的元素"></a>4.3 遍历字典的元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> dict1.items():<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%AD%97%E5%85%B8/image-20190212104046564.png"></p><h2 id="4-4-遍历字典的键值对"><a href="#4-4-遍历字典的键值对" class="headerlink" title="4.4 遍历字典的键值对"></a>4.4 遍历字典的键值对</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> dict1.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span> = <span class="hljs-subst">&#123;value&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%AD%97%E5%85%B8/image-20190212104223143.png"></p><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul><li>定义字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">30</span>&#125;<br><br>dict2 = &#123;&#125;<br><br>dict3 = <span class="hljs-built_in">dict</span>()<br></code></pre></td></tr></table></figure><ul><li>常见操作<ul><li>增&#x2F;改</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字典序列[key] = 值<br></code></pre></td></tr></table></figure><ul><li>查找<ul><li>字典序列[key]</li><li>keys()</li><li>values()</li><li>items()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>字典</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>元组</title>
    <link href="/2023/01/16/%E5%85%83%E7%BB%84/"/>
    <url>/2023/01/16/%E5%85%83%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>元组的应用场景</li><li>定义元组</li><li>元组常见操作</li></ul><h1 id="一-元组的应用场景"><a href="#一-元组的应用场景" class="headerlink" title="一.  元组的应用场景"></a>一.  元组的应用场景</h1><p>思考：如果想要存储多个数据，但是这些数据是不能修改的数据，怎么做？</p><p>答：列表？列表可以一次性存储多个数据，但是列表中的数据允许更改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num_list = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br>num_list[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;一个元组可以存储多个数据，元组内的数据是不能修改的。&#x3D;&#x3D;</p><h1 id="二-定义元组"><a href="#二-定义元组" class="headerlink" title="二. 定义元组"></a>二. 定义元组</h1><p>元组特点：定义元组使用&#x3D;&#x3D;小括号&#x3D;&#x3D;，且&#x3D;&#x3D;逗号&#x3D;&#x3D;隔开各个数据，数据可以是不同的数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 多个数据元组</span><br>t1 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br><br><span class="hljs-comment"># 单个数据元组</span><br>t2 = (<span class="hljs-number">10</span>,)<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果定义的元组只有一个数据，那么这个数据后面也好添加逗号，否则数据类型为唯一的这个数据的数据类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">t2 = (<span class="hljs-number">10</span>,)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t2))  <span class="hljs-comment"># tuple</span><br><br>t3 = (<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t3))  <span class="hljs-comment"># int</span><br><br>t4 = (<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t4))  <span class="hljs-comment"># str</span><br></code></pre></td></tr></table></figure><h1 id="三-元组的常见操作"><a href="#三-元组的常见操作" class="headerlink" title="三. 元组的常见操作"></a>三. 元组的常见操作</h1><p>元组数据不支持修改，只支持查找，具体如下：</p><ul><li>按下标查找数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br><span class="hljs-built_in">print</span>(tuple1[<span class="hljs-number">0</span>])  <span class="hljs-comment"># aa</span><br></code></pre></td></tr></table></figure><ul><li>index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br><span class="hljs-built_in">print</span>(tuple1.index(<span class="hljs-string">&#x27;aa&#x27;</span>))  <span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure><ul><li>count()：统计某个数据在当前元组出现的次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br><span class="hljs-built_in">print</span>(tuple1.count(<span class="hljs-string">&#x27;bb&#x27;</span>))  <span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><ul><li>len()：统计元组中数据的个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(tuple1))  <span class="hljs-comment"># 4</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：元组内的直接数据如果修改则立即报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br>tuple1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;aaa&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>但是如果元组里面有列表，修改列表里面的数据则是支持的，故自觉很重要。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple2 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, [<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>], <span class="hljs-number">50</span>, <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(tuple2[<span class="hljs-number">2</span>])  <span class="hljs-comment"># 访问到列表</span><br><br><span class="hljs-comment"># 结果：(10, 20, [&#x27;aaaaa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;], 50, 30)</span><br>tuple2[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;aaaaa&#x27;</span><br><span class="hljs-built_in">print</span>(tuple2)<br></code></pre></td></tr></table></figure><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul><li>定义元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br><br>t2 = (<span class="hljs-number">10</span>,)<br></code></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>index()</li><li>len()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>元组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>列表</title>
    <link href="/2023/01/16/%E5%88%97%E8%A1%A8/"/>
    <url>/2023/01/16/%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>列表的应用场景</li><li>列表的格式</li><li>列表的常用操作</li><li>列表的循环遍历</li><li>列表的嵌套使用</li></ul><h1 id="一-列表的应用场景"><a href="#一-列表的应用场景" class="headerlink" title="一. 列表的应用场景"></a>一. 列表的应用场景</h1><p>思考：有一个人的姓名(TOM)怎么书写存储程序？</p><p>答：变量。</p><p>思考：如果一个班级100位学生，每个人的姓名都要存储，应该如何书写程序？声明100个变量吗？</p><p>答：列表即可， 列表一次性可以存储多个数据。</p><h1 id="二-列表的格式"><a href="#二-列表的格式" class="headerlink" title="二. 列表的格式"></a>二. 列表的格式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[数据<span class="hljs-number">1</span>, 数据<span class="hljs-number">2</span>, 数据<span class="hljs-number">3</span>, 数据<span class="hljs-number">4.</span>.....]<br></code></pre></td></tr></table></figure><p>列表可以一次性存储多个数据，且可以为不同数据类型。</p><h1 id="三-列表的常用操作"><a href="#三-列表的常用操作" class="headerlink" title="三. 列表的常用操作"></a>三. 列表的常用操作</h1><p>列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</p><h2 id="3-1-查找"><a href="#3-1-查找" class="headerlink" title="3.1 查找"></a>3.1 查找</h2><h3 id="3-1-1-下标"><a href="#3-1-1-下标" class="headerlink" title="3.1.1 下标"></a>3.1.1 下标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">0</span>])  <span class="hljs-comment"># Tom</span><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">1</span>])  <span class="hljs-comment"># Lily</span><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">2</span>])  <span class="hljs-comment"># Rose</span><br></code></pre></td></tr></table></figure><h3 id="3-1-2-函数"><a href="#3-1-2-函数" class="headerlink" title="3.1.2 函数"></a>3.1.2 函数</h3><ul><li>index()：返回指定数据所在位置的下标 。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.index(数据, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-built_in">print</span>(name_list.index(<span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：如果查找的数据不存在则报错。</p></blockquote><ul><li>count()：统计指定数据在当前列表中出现的次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-built_in">print</span>(name_list.count(<span class="hljs-string">&#x27;Lily&#x27;</span>))  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><ul><li>len()：访问列表长度，即列表中数据的个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(name_list))  <span class="hljs-comment"># 3</span><br></code></pre></td></tr></table></figure><h3 id="3-1-3-判断是否存在"><a href="#3-1-3-判断是否存在" class="headerlink" title="3.1.3 判断是否存在"></a>3.1.3 判断是否存在</h3><ul><li>in：判断指定数据在某个列表序列，如果在返回True，否则返回False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Lily&#x27;</span> <span class="hljs-keyword">in</span> name_list)<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Lilys&#x27;</span> <span class="hljs-keyword">in</span> name_list)<br></code></pre></td></tr></table></figure><ul><li>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Lily&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name_list)<br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Lilys&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name_list)<br></code></pre></td></tr></table></figure><ul><li>体验案例</li></ul><p>需求：查找用户输入的名字是否已经存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您要搜索的名字：&#x27;</span>)<br><br><span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> name_list:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的名字是<span class="hljs-subst">&#123;name&#125;</span>, 名字已经存在&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的名字是<span class="hljs-subst">&#123;name&#125;</span>, 名字不存在&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-2-增加"><a href="#3-2-增加" class="headerlink" title="3.2 增加"></a>3.2 增加</h2><p>作用：增加指定数据到列表中。</p><ul><li>append()：列表结尾追加数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.append(数据)<br></code></pre></td></tr></table></figure><ol start="2"><li>体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.append(<span class="hljs-string">&#x27;xiaoming&#x27;</span>)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%88%97%E8%A1%A8/image-20190130160154636.png"></p><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</p></blockquote><ol start="3"><li>注意点</li></ol><p>如果append()追加的数据是一个序列，则追加整个序列到列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.append([<span class="hljs-string">&#x27;xiaoming&#x27;</span>, <span class="hljs-string">&#x27;xiaohong&#x27;</span>])<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, [&#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.extend(数据)<br></code></pre></td></tr></table></figure><ol start="2"><li><p>快速体验</p><p>2.1 单个数据</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.extend(<span class="hljs-string">&#x27;xiaoming&#x27;</span>)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;x&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><pre><code class="hljs">2.2 序列数据</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.extend([<span class="hljs-string">&#x27;xiaoming&#x27;</span>, <span class="hljs-string">&#x27;xiaohong&#x27;</span>])<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>insert()：指定位置新增数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.insert(位置下标, 数据)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;xiaoming&#x27;</span>)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;xiaoming&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><h2 id="3-3-删除"><a href="#3-3-删除" class="headerlink" title="3.3 删除"></a>3.3 删除</h2><ul><li>del</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> 目标<br></code></pre></td></tr></table></figure><ol start="2"><li><p>快速体验</p><p>2.1 删除列表</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-comment"># 结果：报错提示：name &#x27;name_list&#x27; is not defined</span><br><span class="hljs-keyword">del</span> name_list<br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><pre><code class="hljs">2.2 删除指定数据</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-keyword">del</span> name_list[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 结果：[&#x27;Lily&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.pop(下标)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>del_name = name_list.pop(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 结果：Lily</span><br><span class="hljs-built_in">print</span>(del_name)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>remove()：移除列表中某个数据的第一个匹配项。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.remove(数据)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.remove(<span class="hljs-string">&#x27;Rose&#x27;</span>)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>clear()：清空列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.clear()<br><span class="hljs-built_in">print</span>(name_list) <span class="hljs-comment"># 结果： []</span><br></code></pre></td></tr></table></figure><h2 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h2><ul><li>修改指定下标数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;aaa&#x27;</span><br><br><span class="hljs-comment"># 结果：[&#x27;aaa&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>逆置：reverse()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num_list = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><br>num_list.reverse()<br><br><span class="hljs-comment"># 结果：[8, 6, 3, 2, 5, 1]</span><br><span class="hljs-built_in">print</span>(num_list)<br></code></pre></td></tr></table></figure><ul><li>排序：sort()</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.sort( key=<span class="hljs-literal">None</span>, reverse=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：reverse表示排序规则，<strong>reverse &#x3D; True</strong> 降序， <strong>reverse &#x3D; False</strong> 升序（默认）</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num_list = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><br>num_list.sort()<br><br><span class="hljs-comment"># 结果：[1, 2, 3, 5, 6, 8]</span><br><span class="hljs-built_in">print</span>(num_list)<br></code></pre></td></tr></table></figure><h2 id="3-5-复制"><a href="#3-5-复制" class="headerlink" title="3.5 复制"></a>3.5 复制</h2><p>函数：copy()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_li2 = name_list.copy()<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_li2)<br></code></pre></td></tr></table></figure><h1 id="四-列表的循环遍历"><a href="#四-列表的循环遍历" class="headerlink" title="四. 列表的循环遍历"></a>四. 列表的循环遍历</h1><p>需求：依次打印列表中的各个数据。</p><h2 id="4-1-while"><a href="#4-1-while" class="headerlink" title="4.1 while"></a>4.1 while</h2><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(name_list):<br>    <span class="hljs-built_in">print</span>(name_list[i])<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/2023/01/16/%E5%88%97%E8%A1%A8/image-20190130164205143.png"></p><h2 id="4-2-for"><a href="#4-2-for" class="headerlink" title="4.2 for"></a>4.2 for</h2><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name_list:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/2023/01/16/%E5%88%97%E8%A1%A8/image-20190130164227739.png"></p><h1 id="五-列表嵌套"><a href="#五-列表嵌套" class="headerlink" title="五. 列表嵌套"></a>五. 列表嵌套</h1><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小绿&#x27;</span>], [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>], [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>]]<br></code></pre></td></tr></table></figure><blockquote><p>思考： 如何查找到数据”李四”？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一步：按下标查找到李四所在的列表</span><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># 第二步：从李四所在的列表里面，再按下标找到数据李四</span><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h1 id="六-总结"><a href="#六-总结" class="headerlink" title="六. 总结"></a>六. 总结</h1><ul><li>列表的格式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[数据<span class="hljs-number">1</span>, 数据<span class="hljs-number">2</span>, 数据<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>index()</li><li>len()</li><li>append()</li><li>pop()</li><li>remove()</li></ul></li><li>列表嵌套</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小绿&#x27;</span>], [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>], [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>]]<br>name_list[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>列表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>认识字符串</li><li>下标</li><li>切片</li><li>常用操作方法</li></ul><h1 id="一-认识字符串"><a href="#一-认识字符串" class="headerlink" title="一. 认识字符串"></a>一. 认识字符串</h1><p>字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;hello world&#x27;</span><br>b = <span class="hljs-string">&quot;abcdefg&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))<br></code></pre></td></tr></table></figure><blockquote><p>注意：控制台显示结果为<code>&lt;class &#39;str&#39;&gt;</code>， 即数据类型为str(字符串)。</p></blockquote><h2 id="1-1-字符串特征"><a href="#1-1-字符串特征" class="headerlink" title="1.1 字符串特征"></a>1.1 字符串特征</h2><ul><li>一对引号字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name1 = <span class="hljs-string">&#x27;Tom&#x27;</span><br>name2 = <span class="hljs-string">&quot;Rose&quot;</span><br></code></pre></td></tr></table></figure><ul><li>三引号字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name3 = <span class="hljs-string">&#x27;&#x27;&#x27; Tom &#x27;&#x27;&#x27;</span><br>name4 = <span class="hljs-string">&quot;&quot;&quot; Rose &quot;&quot;&quot;</span><br>a = <span class="hljs-string">&#x27;&#x27;&#x27; i am Tom, </span><br><span class="hljs-string">        nice to meet you! &#x27;&#x27;&#x27;</span><br><br>b = <span class="hljs-string">&quot;&quot;&quot; i am Rose, </span><br><span class="hljs-string">        nice to meet you! &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：三引号形式的字符串支持换行。</p></blockquote><blockquote><p>思考：如果创建一个字符串<code> I&#39;m Tom</code>?</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">c = <span class="hljs-string">&quot;I&#x27;m Tom&quot;</span><br>d = <span class="hljs-string">&#x27;I\&#x27;m Tom&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-字符串输出"><a href="#1-2-字符串输出" class="headerlink" title="1.2 字符串输出"></a>1.2 字符串输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br><br>name = <span class="hljs-string">&#x27;Tom&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s&#x27;</span> % name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;我的名字是<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="1-3-字符串输入"><a href="#1-3-字符串输入" class="headerlink" title="1.3 字符串输入"></a>1.3 字符串输入</h2><p>在Python中，使用<code>input()</code>接收用户输入。</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的名字：&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的名字是<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(name))<br><br>password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的密码：&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的密码是<span class="hljs-subst">&#123;password&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(password))<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129172920882.png"></p><h1 id="二、下标"><a href="#二、下标" class="headerlink" title="二、下标"></a>二、下标</h1><p><code>“下标”</code>又叫<code>“索引”</code>，就是编号。比如火车座位号，座位号的作用：按照编号快速找到对应的座位。同理，下标的作用即是通过下标快速找到对应的数据。</p><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129173606647.png"></p><h2 id="2-1-快速体验"><a href="#2-1-快速体验" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h2><p>需求：字符串<code>name = &quot;abcdef&quot;</code>，取到不同下标对应的数据。</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;abcdef&quot;</span><br><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129174231104.png"></p><blockquote><p>注意：下标从&#x3D;&#x3D;0&#x3D;&#x3D;开始。</p></blockquote><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.png"></p><h1 id="三、切片"><a href="#三、切片" class="headerlink" title="三、切片"></a>三、切片</h1><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p><h2 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">序列[开始位置下标:结束位置下标:步长]<br></code></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><pre><code class="hljs"> 1. 不包含结束位置下标对应的数据， 正负整数均可； 2. 步长是选取间隔，正负整数均可，默认步长为1。</code></pre><h2 id="3-2-体验"><a href="#3-2-体验" class="headerlink" title="3.2 体验"></a>3.2 体验</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;abcdefg&quot;</span><br><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>:<span class="hljs-number">1</span>])  <span class="hljs-comment"># cde</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])  <span class="hljs-comment"># cde</span><br><span class="hljs-built_in">print</span>(name[:<span class="hljs-number">5</span>])  <span class="hljs-comment"># abcde</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>:])  <span class="hljs-comment"># bcdefg</span><br><span class="hljs-built_in">print</span>(name[:])  <span class="hljs-comment"># abcdefg</span><br><span class="hljs-built_in">print</span>(name[::<span class="hljs-number">2</span>])  <span class="hljs-comment"># aceg</span><br><span class="hljs-built_in">print</span>(name[:-<span class="hljs-number">1</span>])  <span class="hljs-comment"># abcdef, 负1表示倒数第一个数据</span><br><span class="hljs-built_in">print</span>(name[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>])  <span class="hljs-comment"># def</span><br><span class="hljs-built_in">print</span>(name[::-<span class="hljs-number">1</span>])  <span class="hljs-comment"># gfedcba</span><br></code></pre></td></tr></table></figure><h1 id="四、常用操作方法"><a href="#四、常用操作方法" class="headerlink" title="四、常用操作方法"></a>四、常用操作方法</h1><p>字符串的常用操作方法有查找、修改和判断三大类。</p><h2 id="4-1-查找"><a href="#4-1-查找" class="headerlink" title="4.1 查找"></a>4.1 查找</h2><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul><li>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.find(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-built_in">print</span>(mystr.find(<span class="hljs-string">&#x27;and&#x27;</span>))  <span class="hljs-comment"># 12</span><br><span class="hljs-built_in">print</span>(mystr.find(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-number">30</span>))  <span class="hljs-comment"># 23</span><br><span class="hljs-built_in">print</span>(mystr.find(<span class="hljs-string">&#x27;ands&#x27;</span>))  <span class="hljs-comment"># -1</span><br></code></pre></td></tr></table></figure><ul><li>index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.index(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-built_in">print</span>(mystr.index(<span class="hljs-string">&#x27;and&#x27;</span>))  <span class="hljs-comment"># 12</span><br><span class="hljs-built_in">print</span>(mystr.index(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-number">30</span>))  <span class="hljs-comment"># 23</span><br><span class="hljs-built_in">print</span>(mystr.index(<span class="hljs-string">&#x27;ands&#x27;</span>))  <span class="hljs-comment"># 报错</span><br></code></pre></td></tr></table></figure><ul><li>rfind()： 和find()功能相同，但查找方向为&#x3D;&#x3D;右侧&#x3D;&#x3D;开始。</li><li>rindex()：和index()功能相同，但查找方向为&#x3D;&#x3D;右侧&#x3D;&#x3D;开始。</li><li>count()：返回某个子串在字符串中出现的次数</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.count(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-built_in">print</span>(mystr.count(<span class="hljs-string">&#x27;and&#x27;</span>))  <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(mystr.count(<span class="hljs-string">&#x27;ands&#x27;</span>))  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(mystr.count(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>))  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h2 id="4-2-修改"><a href="#4-2-修改" class="headerlink" title="4.2 修改"></a>4.2 修改</h2><p>所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</p><ul><li>replace()：替换</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.replace(旧子串, 新子串, 替换次数)<br></code></pre></td></tr></table></figure><blockquote><p>注意：替换次数如果查出子串出现次数，则替换次数为该子串出现次数。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：hello world he itcast he itheima he Python</span><br><span class="hljs-built_in">print</span>(mystr.replace(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;he&#x27;</span>))<br><span class="hljs-comment"># 结果：hello world he itcast he itheima he Python</span><br><span class="hljs-built_in">print</span>(mystr.replace(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;he&#x27;</span>, <span class="hljs-number">10</span>))<br><span class="hljs-comment"># 结果：hello world and itcast and itheima and Python</span><br><span class="hljs-built_in">print</span>(mystr)<br></code></pre></td></tr></table></figure><blockquote><p>注意：数据按照是否能直接修改分为&#x3D;&#x3D;可变类型&#x3D;&#x3D;和&#x3D;&#x3D;不可变类型&#x3D;&#x3D;两种。字符串类型的数据修改的时候不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型。</p></blockquote><ul><li>split()：按照指定字符分割字符串。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.split(分割字符, num)<br></code></pre></td></tr></table></figure><blockquote><p>注意：num表示的是分割字符出现的次数，即将来返回数据个数为num+1个。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima &#x27;, &#x27; Python&#x27;]</span><br><span class="hljs-built_in">print</span>(mystr.split(<span class="hljs-string">&#x27;and&#x27;</span>))<br><span class="hljs-comment"># 结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima and Python&#x27;]</span><br><span class="hljs-built_in">print</span>(mystr.split(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-number">2</span>))<br><span class="hljs-comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and&#x27;, &#x27;itcast&#x27;, &#x27;and&#x27;, &#x27;itheima&#x27;, &#x27;and&#x27;, &#x27;Python&#x27;]</span><br><span class="hljs-built_in">print</span>(mystr.split(<span class="hljs-string">&#x27; &#x27;</span>))<br><span class="hljs-comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and itcast and itheima and Python&#x27;]</span><br><span class="hljs-built_in">print</span>(mystr.split(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果分割字符是原有字符串中的子串，分割后则丢失该子串。</p></blockquote><ul><li>join()：用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符或子串.join(多字符串组成的序列)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;chuan&#x27;</span>, <span class="hljs-string">&#x27;zhi&#x27;</span>, <span class="hljs-string">&#x27;bo&#x27;</span>, <span class="hljs-string">&#x27;ke&#x27;</span>]<br>t1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;ddd&#x27;</span>)<br><span class="hljs-comment"># 结果：chuan_zhi_bo_ke</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;_&#x27;</span>.join(list1))<br><span class="hljs-comment"># 结果：aa...b...cc...ddd</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;...&#x27;</span>.join(t1))<br></code></pre></td></tr></table></figure><ul><li>capitalize()：将字符串第一个字符转换成大写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：Hello world and itcast and itheima and python</span><br><span class="hljs-built_in">print</span>(mystr.capitalize())<br></code></pre></td></tr></table></figure><blockquote><p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p></blockquote><ul><li>title()：将字符串每个单词首字母转换成大写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：Hello World And Itcast And Itheima And Python</span><br><span class="hljs-built_in">print</span>(mystr.title())<br></code></pre></td></tr></table></figure><ul><li>lower()：将字符串中大写转小写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：hello world and itcast and itheima and python</span><br><span class="hljs-built_in">print</span>(mystr.lower())<br></code></pre></td></tr></table></figure><ul><li>upper()：将字符串中小写转大写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：HELLO WORLD AND ITCAST AND ITHEIMA AND PYTHON</span><br><span class="hljs-built_in">print</span>(mystr.upper())<br></code></pre></td></tr></table></figure><ul><li>lstrip()：删除字符串左侧空白字符。</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129213453010.png"></p><ul><li>rstrip()：删除字符串右侧空白字符。</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129213558850.png"></p><ul><li>strip()：删除字符串两侧空白字符。</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129213637584.png"></p><ul><li>ljust()：返回一个原字符串左对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.ljust(长度, 填充字符)<br></code></pre></td></tr></table></figure><ol start="2"><li>输出效果</li></ol><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190130141125560.png"></p><ul><li>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li><li>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190130141442074.png"></p><h2 id="4-3-判断"><a href="#4-3-判断" class="headerlink" title="4.3 判断"></a>4.3 判断</h2><p>所谓判断即是判断真假，返回的结果是布尔型数据类型：True 或 False。</p><ul><li>startswith()：检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.startswith(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python   &quot;</span><br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr.startswith(<span class="hljs-string">&#x27;hello&#x27;</span>))<br><br><span class="hljs-comment"># 结果False</span><br><span class="hljs-built_in">print</span>(mystr.startswith(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><ul><li>endswith()：：检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.endswith(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr.endswith(<span class="hljs-string">&#x27;Python&#x27;</span>))<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr.endswith(<span class="hljs-string">&#x27;python&#x27;</span>))<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr.endswith(<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><ul><li>isalpha()：如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr1 = <span class="hljs-string">&#x27;hello&#x27;</span><br>mystr2 = <span class="hljs-string">&#x27;hello12345&#x27;</span><br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr1.isalpha())<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr2.isalpha())<br></code></pre></td></tr></table></figure><ul><li>isdigit()：如果字符串只包含数字则返回 True 否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr1 = <span class="hljs-string">&#x27;aaa12345&#x27;</span><br>mystr2 = <span class="hljs-string">&#x27;12345&#x27;</span><br><br><span class="hljs-comment"># 结果： False</span><br><span class="hljs-built_in">print</span>(mystr1.isdigit())<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr2.isdigit())<br></code></pre></td></tr></table></figure><ul><li>isalnum()：如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr1 = <span class="hljs-string">&#x27;aaa12345&#x27;</span><br>mystr2 = <span class="hljs-string">&#x27;12345-&#x27;</span><br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr1.isalnum())<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr2.isalnum())<br></code></pre></td></tr></table></figure><ul><li>isspace()：如果字符串中只包含空白，则返回 True，否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr1 = <span class="hljs-string">&#x27;1 2 3 4 5&#x27;</span><br>mystr2 = <span class="hljs-string">&#x27;     &#x27;</span><br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr1.isspace())<br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr2.isspace())<br></code></pre></td></tr></table></figure><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul><li>下标<ul><li>计算机为数据序列中每个元素分配的从0开始的编号</li></ul></li><li>切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">序列名[开始位置下标:结束位置下标:步长]<br></code></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>find()</li><li>index()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 循环</title>
    <link href="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/"/>
    <url>/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>了解循环</li><li>while语法【重点】</li><li>while应用</li><li>break和continue</li><li>while循环嵌套【重点】</li><li>while循环嵌套应用【难点】</li><li>for循环</li></ul><h1 id="一-循环简介"><a href="#一-循环简介" class="headerlink" title="一. 循环简介"></a>一. 循环简介</h1><h2 id="1-1-循环的作用"><a href="#1-1-循环的作用" class="headerlink" title="1.1 循环的作用"></a>1.1 循环的作用</h2><blockquote><p>思考：假如我有个女朋友，有一天我们闹矛盾生气了，女朋友说：道歉，说100遍“媳妇儿，我错了”。这个时候程序员会怎么做？</p><p>答：100遍<code>print(&#39;媳妇儿，我错了&#39;)</code></p></blockquote><blockquote><p>思考：复制粘贴100次吗？</p><p>答：重复执行100次一样的代码，程序中循环即可</p></blockquote><p>循环的作用：让代码更高效的重复执行。</p><h2 id="1-2-循环的分类"><a href="#1-2-循环的分类" class="headerlink" title="1.2 循环的分类"></a>1.2 循环的分类</h2><p>在Python中，循环分为<code>while</code>和<code>for</code>两种，最终实现效果相同。</p><h1 id="二-while的语法"><a href="#二-while的语法" class="headerlink" title="二. while的语法"></a>二. while的语法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    条件成立重复执行的代码<span class="hljs-number">1</span><br>    条件成立重复执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><h2 id="2-1-快速体验"><a href="#2-1-快速体验" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h2><p>需求：复现重复执行100次<code>print(&#39;媳妇儿，我错了&#39;)</code>（输出更简洁一些，我们这里设置5次）。</p><p>分析：初始值是0次，终点是5次，重复做的事情输出“媳妇儿， 我错了”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 循环的计数器</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;任务结束&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="三-while的应用"><a href="#三-while的应用" class="headerlink" title="三. while的应用"></a>三. while的应用</h1><h2 id="3-1-应用一：计算1-100累加和"><a href="#3-1-应用一：计算1-100累加和" class="headerlink" title="3.1 应用一：计算1-100累加和"></a>3.1 应用一：计算1-100累加和</h2><p>分析：1-100的累加和，即1 + 2 + 3 + 4 +….，即前两个数字的相加结果 + 下一个数字( 前一个数字 + 1)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>    result += i<br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 输出5050</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><blockquote><p>注意：为了验证程序的准确性，可以先改小数值，验证结果正确后，再改成1-100做累加。</p></blockquote><h2 id="3-2-应用二：计算1-100偶数累加和"><a href="#3-2-应用二：计算1-100偶数累加和" class="headerlink" title="3.2 应用二：计算1-100偶数累加和"></a>3.2 应用二：计算1-100偶数累加和</h2><p>分析：1-100的偶数和，即 2 + 4 + 6 + 8….，得到偶数的方法如下：</p><ul><li>偶数即是和2取余结果为0的数字，可以加入条件语句判断是否为偶数，为偶数则累加</li><li>初始值为0 &#x2F; 2 , 计数器每次累加2</li></ul><h3 id="3-2-1-方法一：条件判断和2取余数则累加"><a href="#3-2-1-方法一：条件判断和2取余数则累加" class="headerlink" title="3.2.1 方法一：条件判断和2取余数则累加"></a>3.2.1 方法一：条件判断和2取余数则累加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一：条件判断和2取余数为0则累加计算</span><br>i = <span class="hljs-number">1</span><br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        result += i<br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 输出2550</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="3-2-2-方法二：计数器控制"><a href="#3-2-2-方法二：计数器控制" class="headerlink" title="3.2.2 方法二：计数器控制"></a>3.2.2 方法二：计数器控制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法二：计数器控制增量为2</span><br>i = <span class="hljs-number">0</span><br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>    result += i<br>    i += <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 输出2550</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h1 id="四、break和continue"><a href="#四、break和continue" class="headerlink" title="四、break和continue"></a>四、break和continue</h1><p>break和continue是循环中满足一定条件退出循环的两种不同方式。</p><h2 id="4-1-理解"><a href="#4-1-理解" class="headerlink" title="4.1 理解"></a>4.1 理解</h2><p>举例：一共吃5个苹果，吃完第一个，吃第二个…，这里”吃苹果”的动作是不是重复执行？</p><p>情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第五个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即&#x3D;&#x3D;终止此循环&#x3D;&#x3D;。</p><p>情况二：如果吃的过程中，吃到第三个吃出一个大虫子…,是不是这个苹果就不吃了，开始吃第四个苹果，这里就是continue控制循环流程，即&#x3D;&#x3D;退出当前一次循环继而执行下一次循环代码&#x3D;&#x3D;。</p><h3 id="4-1-1-情况一：break"><a href="#4-1-1-情况一：break" class="headerlink" title="4.1.1 情况一：break"></a>4.1.1 情况一：break</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;吃饱了不吃了&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;吃了第<span class="hljs-subst">&#123;i&#125;</span>个苹果&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190124114340900.png"></p><h3 id="4-1-2-情况二：continue"><a href="#4-1-2-情况二：continue" class="headerlink" title="4.1.2 情况二：continue"></a>4.1.2 情况二：continue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;大虫子，第<span class="hljs-subst">&#123;i&#125;</span>个不吃了&#x27;</span>)<br>        <span class="hljs-comment"># 在continue之前一定要修改计数器，否则会陷入死循环</span><br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;吃了第<span class="hljs-subst">&#123;i&#125;</span>个苹果&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190124114514775.png"></p><h1 id="五-while循环嵌套"><a href="#五-while循环嵌套" class="headerlink" title="五. while循环嵌套"></a>五. while循环嵌套</h1><h2 id="5-1-应用场景"><a href="#5-1-应用场景" class="headerlink" title="5.1 应用场景"></a>5.1 应用场景</h2><p>故事梗概：有天女朋友又生气了，惩罚：说3遍“媳妇儿， 我错了”，这个程序是不是循环即可？但如果女朋友说：还要刷今天晚饭的碗，这个程序怎么书写？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿， 我错了&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;刷晚饭的碗&#x27;</span>)<br></code></pre></td></tr></table></figure><p>但如果女朋友还是生气，把这套惩罚要连续3天都执行，有如何书写程序？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    <span class="hljs-keyword">while</span> 条件:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿， 我错了&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;刷晚饭的碗&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="5-2-语法"><a href="#5-2-语法" class="headerlink" title="5.2 语法"></a>5.2 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<br>    ......<br>    <span class="hljs-keyword">while</span> 条件<span class="hljs-number">2</span>:<br>        条件<span class="hljs-number">2</span>成立执行的代码<br>        ......<br></code></pre></td></tr></table></figure><blockquote><p>总结：所谓while循环嵌套，就是一个while里面嵌套一个while的写法，每个while和之前的基础语法是相同的。</p></blockquote><h2 id="5-3-快速体验：复现场景"><a href="#5-3-快速体验：复现场景" class="headerlink" title="5.3 快速体验：复现场景"></a>5.3 快速体验：复现场景</h2><h3 id="5-3-1-代码"><a href="#5-3-1-代码" class="headerlink" title="5.3.1 代码"></a>5.3.1 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">j = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> j &lt; <span class="hljs-number">3</span>:<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;刷晚饭的碗&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;一套惩罚结束----------------&#x27;</span>)<br>    j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="5-3-2-执行结果"><a href="#5-3-2-执行结果" class="headerlink" title="5.3.2 执行结果"></a>5.3.2 执行结果</h3><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104161506542-6589706.png"></p><h3 id="5-3-3-理解执行流程"><a href="#5-3-3-理解执行流程" class="headerlink" title="5.3.3 理解执行流程"></a>5.3.3 理解执行流程</h3><p>当内部循环执行完成之后，再执行下一次外部循环的条件判断。</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/while2.png"></p><h1 id="六-while循环嵌套应用"><a href="#六-while循环嵌套应用" class="headerlink" title="六. while循环嵌套应用"></a>六. while循环嵌套应用</h1><h2 id="6-1-应用一：打印星号-正方形"><a href="#6-1-应用一：打印星号-正方形" class="headerlink" title="6.1 应用一：打印星号(正方形)"></a>6.1 应用一：打印星号(正方形)</h2><h3 id="6-1-1-需求"><a href="#6-1-1-需求" class="headerlink" title="6.1.1 需求"></a>6.1.1 需求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">*****<br>*****<br>*****<br>*****<br>*****<br></code></pre></td></tr></table></figure><h3 id="6-1-2-代码"><a href="#6-1-2-代码" class="headerlink" title="6.1.2 代码"></a>6.1.2 代码</h3><p>分析：一行输出5个星号，重复打印5行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重复打印5行星星</span><br>j = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> j &lt;= <span class="hljs-number">4</span>:<br>    <span class="hljs-comment"># 一行星星的打印</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">4</span>:<br>        <span class="hljs-comment"># 一行内的星星不能换行，取消print默认结束符\n</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 每行结束要换行，这里借助一个空的print，利用print默认结束符换行</span><br>    <span class="hljs-built_in">print</span>()<br>    j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="6-2-应用二：打印星号-三角形"><a href="#6-2-应用二：打印星号-三角形" class="headerlink" title="6.2 应用二：打印星号(三角形)"></a>6.2 应用二：打印星号(三角形)</h2><h3 id="6-2-1-需求"><a href="#6-2-1-需求" class="headerlink" title="6.2.1 需求"></a>6.2.1 需求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">*<br>**<br>***<br>****<br>*****<br></code></pre></td></tr></table></figure><h3 id="6-2-2-代码"><a href="#6-2-2-代码" class="headerlink" title="6.2.2 代码"></a>6.2.2 代码</h3><p>分析：&#x3D;&#x3D;一行输出星星的个数和行号是相等的&#x3D;&#x3D;，每行：重复打印行号数字个星号，将打印行星号的命令重复执行5次实现打印5行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重复打印5行星星</span><br><span class="hljs-comment"># j表示行号</span><br>j = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> j &lt;= <span class="hljs-number">4</span>:<br>    <span class="hljs-comment"># 一行星星的打印</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span><br>    <span class="hljs-keyword">while</span> i &lt;= j:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>()<br>    j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="6-3-九九乘法表"><a href="#6-3-九九乘法表" class="headerlink" title="6.3 九九乘法表"></a>6.3 九九乘法表</h2><h3 id="6-3-1-执行结果"><a href="#6-3-1-执行结果" class="headerlink" title="6.3.1 执行结果"></a>6.3.1 执行结果</h3><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104163553616-6590953.png"></p><h3 id="6-3-2-代码"><a href="#6-3-2-代码" class="headerlink" title="6.3.2 代码"></a>6.3.2 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重复打印9行表达式</span><br>j = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> j &lt;= <span class="hljs-number">9</span>:<br>    <span class="hljs-comment"># 打印一行里面的表达式 a * b = a*b</span><br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i &lt;= j:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>*<span class="hljs-subst">&#123;j&#125;</span>=<span class="hljs-subst">&#123;j*i&#125;</span>&#x27;</span>, end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>()<br>    j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="七、for循环"><a href="#七、for循环" class="headerlink" title="七、for循环"></a>七、for循环</h1><h2 id="7-1-语法"><a href="#7-1-语法" class="headerlink" title="7.1 语法"></a>7.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 临时变量 <span class="hljs-keyword">in</span> 序列:<br>    重复执行的代码<span class="hljs-number">1</span><br>    重复执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><h2 id="7-2-快速体验"><a href="#7-2-快速体验" class="headerlink" title="7.2 快速体验"></a>7.2 快速体验</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104164152311-6591312.png"></p><h2 id="7-3-break"><a href="#7-3-break" class="headerlink" title="7.3 break"></a>7.3 break</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;e&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;遇到e不打印&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104165242555-6591962.png"></p><h2 id="7-4-continue"><a href="#7-4-continue" class="headerlink" title="7.4 continue"></a>7.4 continue</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;e&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;遇到e不打印&#x27;</span>)<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104165413160-6592053.png"></p><h1 id="八-else"><a href="#八-else" class="headerlink" title="八. else"></a>八. else</h1><p>循环可以和else配合使用，else下方缩进的代码指的是&#x3D;&#x3D;当循环正常结束之后要执行的代码&#x3D;&#x3D;。</p><h2 id="8-1-while…else"><a href="#8-1-while…else" class="headerlink" title="8.1 while…else"></a>8.1 while…else</h2><p>需求：女朋友生气了，要惩罚：连续说5遍“媳妇儿，我错了”，如果道歉正常完毕女朋友就原谅我了，这个程序怎么写？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿原谅我了...&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>思考： 这个print是不是没有循环也能执行？</p></blockquote><h3 id="8-1-1-语法"><a href="#8-1-1-语法" class="headerlink" title="8.1.1 语法"></a>8.1.1 语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    条件成立重复执行的代码<br><span class="hljs-keyword">else</span>:<br>    循环正常结束之后要执行的代码<br></code></pre></td></tr></table></figure><h3 id="8-1-2-示例"><a href="#8-1-2-示例" class="headerlink" title="8.1.2 示例"></a>8.1.2 示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190125111816497.png"></p><h3 id="8-1-3-退出循环的方式"><a href="#8-1-3-退出循环的方式" class="headerlink" title="8.1.3 退出循环的方式"></a>8.1.3 退出循环的方式</h3><p>需求：女朋友生气，要求道歉5遍：媳妇儿，我错了。道歉到第三遍的时候，媳妇埋怨这一遍说的不真诚，是不是就是要退出循环了？这个退出有两种可能性：</p><ul><li>更生气，不打算原谅，也不需要道歉了，程序如何书写？</li><li>只一遍不真诚，可以忍受，继续下一遍道歉，程序如何书写？</li></ul><ol><li>break</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这遍说的不真诚&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190125111952693.png"></p><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><ol start="2"><li>continue</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这遍说的不真诚&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190125112111170.png"></p><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h2 id="8-2-for…else"><a href="#8-2-for…else" class="headerlink" title="8.2 for…else"></a>8.2 for…else</h2><h3 id="8-2-1-语法"><a href="#8-2-1-语法" class="headerlink" title="8.2.1 语法"></a>8.2.1 语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 临时变量 <span class="hljs-keyword">in</span> 序列:<br>    重复执行的代码<br>    ...<br><span class="hljs-keyword">else</span>:<br>    循环正常结束之后要执行的代码<br></code></pre></td></tr></table></figure><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><h3 id="8-2-2-示例"><a href="#8-2-2-示例" class="headerlink" title="8.2.2 示例"></a>8.2.2 示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;循环正常结束之后执行的代码&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="8-2-3-退出循环的方式"><a href="#8-2-3-退出循环的方式" class="headerlink" title="8.2.3 退出循环的方式"></a>8.2.3 退出循环的方式</h3><ol><li>break终止循环</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;e&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;遇到e不打印&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;循环正常结束之后执行的代码&#x27;</span>)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104165551501-6592151.png"></p><blockquote><p>没有执行else缩进的代码。</p></blockquote><ol start="2"><li>continue控制循环</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;e&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;遇到e不打印&#x27;</span>)<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;循环正常结束之后执行的代码&#x27;</span>)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104165714740-6592234.png"></p><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>循环的作用：控制代码重复执行</li><li>while语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    条件成立重复执行的代码<span class="hljs-number">1</span><br>    条件成立重复执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><ul><li>while循环嵌套语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<br>    ......<br>    <span class="hljs-keyword">while</span> 条件<span class="hljs-number">2</span>:<br>        条件<span class="hljs-number">2</span>成立执行的代码<br>        ......<br></code></pre></td></tr></table></figure><ul><li>for循环语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 临时变量 <span class="hljs-keyword">in</span> 序列:<br>    重复执行的代码<span class="hljs-number">1</span><br>    重复执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><ul><li>break退出整个循环</li><li>continue退出本次循环，继续执行下一次重复执行的代码</li><li>else<ul><li>while和for都可以配合else使用</li><li>else下方缩进的代码含义：当循环正常结束后执行的代码</li><li>break终止循环不会执行else下方缩进的代码</li><li>continue退出循环的方式执行else下方缩进的代码</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>循环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 条件语句</title>
    <link href="/2023/01/16/Python-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/01/16/Python-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="一-了解条件语句"><a href="#一-了解条件语句" class="headerlink" title="一. 了解条件语句"></a>一. 了解条件语句</h1><p>假设一个场景：</p><ul><li>同学们这个年龄去过网吧吗？</li><li>去网吧进门想要上网必须做的一件事是做什么？（考虑重点）</li><li>为什么要把身份证给工作人员？</li><li>是不是就是为了判断是否成年？</li><li>是不是如果成年可以上网？如果不成年则不允许上网？</li></ul><p>其实这里所谓的判断就是条件语句，即<strong>条件成立执行某些代码，条件不成立则不执行这些代码</strong>。</p><h1 id="二-if-语法"><a href="#二-if-语法" class="headerlink" title="二. if 语法"></a>二. if 语法</h1><h2 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>    条件成立执行的代码<span class="hljs-number">1</span><br>    条件成立执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><h1 id="三-实例：上网"><a href="#三-实例：上网" class="headerlink" title="三. 实例：上网"></a>三. 实例：上网</h1><p>需求分析：如果用户年龄大于等于18岁，即成年，输出”已经成年，可以上网”。</p><h2 id="3-1-简单版"><a href="#3-1-简单版" class="headerlink" title="3.1 简单版"></a>3.1 简单版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">20</span><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已经成年，可以上网&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系统关闭&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-2-进阶版"><a href="#3-2-进阶版" class="headerlink" title="3.2 进阶版"></a>3.2 进阶版</h2><p>新增需求：用户可以输出自己的年龄，然后系统进行判断是否成年，成年则输出”您的年龄是’用户输入的年龄’，已经成年，可以上网”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># input接受用户输入的数据是字符串类型，条件是age和整型18做判断，所以这里要int转换数据类型</span><br>age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的年龄：&#x27;</span>))<br><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系统关闭&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="四-if…else…"><a href="#四-if…else…" class="headerlink" title="四. if…else…"></a>四. if…else…</h1><p>作用：条件成立执行if下方的代码; 条件不成立执行else下方的代码。</p><blockquote><p>思考：网吧上网的实例，如果成年，允许上网，如果不成年呢？是不是应该回复用户不能上网？</p></blockquote><h2 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>    条件成立执行的代码<span class="hljs-number">1</span><br>    条件成立执行的代码<span class="hljs-number">2</span><br>    ......<br><span class="hljs-keyword">else</span>:<br>    条件不成立执行的代码<span class="hljs-number">1</span><br>    条件不成立执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><h2 id="4-2-实用版：网吧上网"><a href="#4-2-实用版：网吧上网" class="headerlink" title="4.2 实用版：网吧上网"></a>4.2 实用版：网吧上网</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的年龄：&#x27;</span>))<br><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,未成年，请自行回家写作业&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系统关闭&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果条件成立执行了某些代码，那么其他的情况的代码将不会执行。</p></blockquote><h1 id="五、多重判断"><a href="#五、多重判断" class="headerlink" title="五、多重判断"></a>五、多重判断</h1><blockquote><p>思考：中国合法工作年龄为18-60岁，即如果年龄小于18的情况为童工，不合法；如果年龄在18-60岁之间为合法工龄；大于60岁为法定退休年龄。</p></blockquote><h2 id="5-1-语法"><a href="#5-1-语法" class="headerlink" title="5.1 语法"></a>5.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<span class="hljs-number">1</span><br>    条件<span class="hljs-number">1</span>成立执行的代码<span class="hljs-number">2</span><br>    ......<br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">2</span>：<br>条件<span class="hljs-number">2</span>成立执行的代码<span class="hljs-number">1</span><br>    条件<span class="hljs-number">2</span>成立执行的代码<span class="hljs-number">2</span><br>    ......<br>......<br><span class="hljs-keyword">else</span>:<br>    以上条件都不成立执行执行的代码<br></code></pre></td></tr></table></figure><blockquote><p>多重判断也可以和else配合使用。一般else放到整个if语句的最后，表示以上条件都不成立的时候执行的代码。</p></blockquote><h2 id="5-2-实例：工龄判断"><a href="#5-2-实例：工龄判断" class="headerlink" title="5.2 实例：工龄判断"></a>5.2 实例：工龄判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的年龄：&#x27;</span>))<br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,童工一枚&#x27;</span>)<br><span class="hljs-keyword">elif</span> (age &gt;= <span class="hljs-number">18</span>) <span class="hljs-keyword">and</span> (age &lt;= <span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,合法工龄&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &gt; <span class="hljs-number">60</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,可以退休&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>拓展：<code>age &gt;= 18 and age &lt;= 60</code>可以化简为<code>18 &lt;= age &lt;= 60</code>。</p></blockquote><h1 id="六、if嵌套"><a href="#六、if嵌套" class="headerlink" title="六、if嵌套"></a>六、if嵌套</h1><blockquote><p>思考：坐公交：如果有钱可以上车，没钱不能上车；上车后如果有空座，则可以坐下；如果没空座，就要站着。怎么书写程序？</p></blockquote><h2 id="6-1-语法"><a href="#6-1-语法" class="headerlink" title="6.1 语法"></a>6.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>：<br>条件<span class="hljs-number">1</span>成立执行的代码<br>    条件<span class="hljs-number">1</span>成立执行的代码<br>    <br>    <span class="hljs-keyword">if</span> 条件<span class="hljs-number">2</span>：<br>    条件<span class="hljs-number">2</span>成立执行的代码<br>        条件<span class="hljs-number">2</span>成立执行的代码<br>    <br></code></pre></td></tr></table></figure><blockquote><p>注意：条件2的if也是处于条件1成立执行的代码的缩进关系内部。</p></blockquote><h2 id="6-2-实例：坐公交"><a href="#6-2-实例：坐公交" class="headerlink" title="6.2 实例：坐公交"></a>6.2 实例：坐公交</h2><h3 id="6-2-1-判断是否能上车"><a href="#6-2-1-判断是否能上车" class="headerlink" title="6.2.1 判断是否能上车"></a>6.2.1 判断是否能上车</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 如果有钱，则可以上车</span><br><span class="hljs-string">    2. 上车后，如果有空座，可以坐下</span><br><span class="hljs-string">    上车后，如果没有空座，则站着等空座位</span><br><span class="hljs-string">如果没钱，不能上车</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱</span><br>money = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> money == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="6-2-2-判断是否能坐下"><a href="#6-2-2-判断是否能坐下" class="headerlink" title="6.2.2 判断是否能坐下"></a>6.2.2 判断是否能坐下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 如果有钱，则可以上车</span><br><span class="hljs-string">    2. 上车后，如果有空座，可以坐下</span><br><span class="hljs-string">    上车后，如果没有空座，则站着等空座位</span><br><span class="hljs-string">如果没钱，不能上车</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱; seat = 1 表示有空座，seat = 0 表示没有空座</span><br>money = <span class="hljs-number">1</span><br>seat = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> money == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)<br>    <span class="hljs-keyword">if</span> seat == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;有空座，可以坐下&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没有空座，站等&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="七-应用：猜拳游戏"><a href="#七-应用：猜拳游戏" class="headerlink" title="七. 应用：猜拳游戏"></a>七. 应用：猜拳游戏</h1><p>需求分析：</p><ul><li><p>参与游戏的角色</p><ul><li>玩家<ul><li>手动出拳</li></ul></li><li>电脑<ul><li>随机出拳</li></ul></li></ul></li><li><p>判断输赢</p><ul><li>玩家获胜</li></ul><table><thead><tr><th>玩家</th><th>电脑</th></tr></thead><tbody><tr><td>石头</td><td>剪刀</td></tr><tr><td>剪刀</td><td>布</td></tr><tr><td>布</td><td>石头</td></tr></tbody></table><ul><li>平局<ul><li>玩家出拳 和 电脑出拳相同</li></ul></li><li>电脑获胜</li></ul></li></ul><p>随机做法：</p><pre><code class="hljs"> 1. 导出random模块 2. random.randint(开始,结束)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">提示：0-石头，1-剪刀，2-布</span><br><span class="hljs-string">1. 出拳</span><br><span class="hljs-string">玩家输入出拳</span><br><span class="hljs-string">电脑随机出拳</span><br><span class="hljs-string"></span><br><span class="hljs-string">2. 判断输赢</span><br><span class="hljs-string">玩家获胜</span><br><span class="hljs-string">平局</span><br><span class="hljs-string">电脑获胜</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 导入random模块</span><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 计算电脑出拳的随机数字</span><br>computer = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(computer)<br><br>player = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请出拳：0-石头，1-剪刀，2-布：&#x27;</span>))<br><br><span class="hljs-comment"># 玩家胜利 p0:c1 或 p1:c2 或 p2:c0</span><br><span class="hljs-keyword">if</span> (player == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> computer == <span class="hljs-number">1</span>) <span class="hljs-keyword">or</span> (player == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> computer == <span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> (player == <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> computer == <span class="hljs-number">0</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家获胜&#x27;</span>)<br><br><span class="hljs-comment"># 平局：玩家 == 电脑</span><br><span class="hljs-keyword">elif</span> player == computer:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;平局&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;电脑获胜&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="八-三目运算符"><a href="#八-三目运算符" class="headerlink" title="八.  三目运算符"></a>八.  三目运算符</h1><p>三目运算符也叫三元运算符。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">值<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">else</span> 值<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>快速体验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br><br>c = a <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> b<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>if语句语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>    条件成立执行的代码<br></code></pre></td></tr></table></figure><ul><li>if…else…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>    条件成立执行的代码<br><span class="hljs-keyword">else</span>:<br>    条件不成立执行的代码<br></code></pre></td></tr></table></figure><ul><li>多重判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">2</span>:<br>    条件<span class="hljs-number">2</span>成立执行的代码<br><span class="hljs-keyword">else</span>:<br>    以上条件都不成立执行的代码<br></code></pre></td></tr></table></figure><ul><li>if嵌套</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<br>    <span class="hljs-keyword">if</span> 条件<span class="hljs-number">2</span>:<br>        条件<span class="hljs-number">2</span>成立执行的代码<br>        ....<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>条件语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码复现：GFPGAN</title>
    <link href="/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AGFPGAN/"/>
    <url>/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AGFPGAN/</url>
    
    <content type="html"><![CDATA[<p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python inference_gfpgan.py<br></code></pre></td></tr></table></figure><p>带参数（默认）</p><p>带参数（默认）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python inference_gfpgan.py -i inputs/whole_imgs -o results -v 1.3 -s 2<br></code></pre></td></tr></table></figure><p>说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">Usage: python inference_gfpgan.py -i inputs/whole_imgs -o results -v 1.3 -s 2 [options]...<br><br>  -h                   show this help<br>  -i input             Input image or folder. Default: inputs/whole_imgs<br>  -o output            Output folder. Default: results<br>  -v version           GFPGAN model version. Option: 1 | 1.2 | 1.3. Default: 1.3<br>  -s upscale           The final upsampling scale of the image. Default: 2<br>  -bg_upsampler        background upsampler. Default: realesrgan<br>  -bg_tile             Tile size for background sampler, 0 for no tile during testing. Default: 400<br>  -suffix              Suffix of the restored faces<br>  -only_center_face    Only restore the center face<br>  -aligned             Input are aligned faces<br>  -ext                 Image extension. Options: auto | jpg | png, auto means using the same extension as inputs. Default: auto<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GFPGAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码复现：CycleGAN and pix2pix</title>
    <link href="/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ACycleGAN-and-pix2pix/"/>
    <url>/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ACycleGAN-and-pix2pix/</url>
    
    <content type="html"><![CDATA[<h4 id="安装visdom"><a href="#安装visdom" class="headerlink" title="安装visdom"></a>安装visdom</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install visdom<br></code></pre></td></tr></table></figure><p>开启visdom服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m visdom.server<br></code></pre></td></tr></table></figure><h4 id="训练数据集（数据集名“xxx”更改自己的数据集名称）"><a href="#训练数据集（数据集名“xxx”更改自己的数据集名称）" class="headerlink" title="训练数据集（数据集名“xxx”更改自己的数据集名称）"></a>训练数据集（数据集名“xxx”更改自己的数据集名称）</h4><p>cyclegan训练命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python train.py --dataroot ./datasets/xxx --name xxx_cyclegan --model cycle_gan<br></code></pre></td></tr></table></figure><p>pix2pix训练命令（AtoB表示由A数据集训练生成B数据集）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python train.py --dataroot ./datasets/xxx --name xxx_pix2pix --model pix2pix --direction AtoB<br></code></pre></td></tr></table></figure><h4 id="测试训练好的模型"><a href="#测试训练好的模型" class="headerlink" title="测试训练好的模型"></a>测试训练好的模型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python test.py --dataroot ./datasets/xxx --name xxx_pix2pix --model pix2pix<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CycleGAN and pix2pix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda 虚拟环境配置</title>
    <link href="/2023/01/14/conda-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/01/14/conda-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>以管理员的身份打开anaconda prompt</p><p>查看显卡支持的cuda版本<br>下载安装对应版本的cuda、cuDNN</p><p>CUDA软件（官网地址）：<a href="https://developer.nvidia.com/cuda-11.0-download-archive?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exenetwork">https://developer.nvidia.com/cuda-11.0-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exenetwork</a><br>cuDNN（官网地址）：<a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/8.0.2.39/11.0_20200724/cudnn-11.0-windows-x64-v8.0.2.39.zip">https://developer.nvidia.com/compute/machine-learning/cudnn/secure/8.0.2.39/11.0_20200724/cudnn-11.0-windows-x64-v8.0.2.39.zip</a></p><p>创建虚拟环境路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --prefix D:\anaconda\conda\envs<br></code></pre></td></tr></table></figure><p>激活虚拟环境路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate D:\anaconda\conda\envs<br></code></pre></td></tr></table></figure><p>查看虚拟环境列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env list<br></code></pre></td></tr></table></figure><p>创建虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n xxx python=3.8<br></code></pre></td></tr></table></figure><p>激活虚拟环境（在项目根路径下打开cmd）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate xxx<br></code></pre></td></tr></table></figure><p>退出当前环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda deactivate<br></code></pre></td></tr></table></figure><p>删除虚拟环境（xxx为虚拟环境名）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda remove -n xxx --all<br></code></pre></td></tr></table></figure><p>安装对应版本的python（创建虚拟环境时没有指定python时需要安装）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install python==3.8.5<br></code></pre></td></tr></table></figure><p>安装对应版本pytorch（要和cuda的版本对应）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install torch===1.7.1+cu110 torchvision===0.8.2+cu110 torchaudio===0.7.2 -f https://download.pytorch.org/whl/torch_stable.html -i https://pypi.douban.com/simple/<br></code></pre></td></tr></table></figure><p>安装程序所需依赖（在requirement.txt所在文件夹路径执行cmd命令）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>查看已安装依赖包列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda list<br></code></pre></td></tr></table></figure><p>释放GPU内存，清除GPU中的张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>torch.cuda.empty_cache()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码复现：Bringing Old Photos Back to Life</title>
    <link href="/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ABringing-Old-Photos-Back-to-Life/"/>
    <url>/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ABringing-Old-Photos-Back-to-Life/</url>
    
    <content type="html"><![CDATA[<p>不知道为什么cuda报错，先用CPU运行</p><p>修复带划痕&#x2F;有破损的老照片（使用 RTX 2080Ti 最大可修复 512x512 的照片）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py --input_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\test_images\old_w_scratch --output_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\output --with_scratch --GPU -1<br></code></pre></td></tr></table></figure><p>改进老照片的色彩或清晰度（使用 RTX 2080Ti 最大可改善 1024x1024 的照片）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python run.py --input_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\test_images\old --output_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\output --GPU -1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Old Photos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python运算符</title>
    <link href="/2023/01/14/Python%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/01/14/Python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h1><ul><li>算数运算符</li><li>赋值运算符</li><li>复合赋值运算符</li><li>比较运算符</li><li>逻辑运算符</li></ul><h2 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符"></a>1. 算数运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td>1 + 1 输出结果为 2</td></tr><tr><td align="center">-</td><td align="center">减</td><td>1-1 输出结果为 0</td></tr><tr><td align="center">*</td><td align="center">乘</td><td>2 * 2 输出结果为 4</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td><td>10 &#x2F; 2 输出结果为 5</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">整除</td><td>9 &#x2F;&#x2F; 4 输出结果为2</td></tr><tr><td align="center">%</td><td align="center">取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td align="center">**</td><td align="center">指数</td><td>2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr><tr><td align="center">()</td><td align="center">小括号</td><td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><ul><li>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li></ul><h2 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2. 赋值运算符"></a>2. 赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr></tbody></table><ul><li>单个变量赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><ul><li>多个变量赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">num1, float1, str1 = <span class="hljs-number">10</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-built_in">print</span>(num1)<br><span class="hljs-built_in">print</span>(float1)<br><span class="hljs-built_in">print</span>(str1)<br></code></pre></td></tr></table></figure><ul><li>多变量赋相同值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><h2 id="3-复合赋值运算符"><a href="#3-复合赋值运算符" class="headerlink" title="3. 复合赋值运算符"></a>3. 复合赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等价于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等价于 c &#x3D; c- a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等价于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取余赋值运算符</td><td>c %&#x3D; a 等价于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c ** &#x3D; a 等价于 c &#x3D; c ** a</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br>a += <span class="hljs-number">1</span><br><span class="hljs-comment"># 输出101  a = a + 1,最终a = 100 + 1</span><br><span class="hljs-built_in">print</span>(a)<br><br>b = <span class="hljs-number">2</span><br>b *= <span class="hljs-number">3</span><br><span class="hljs-comment"># 输出6  b = b * 3,最终b = 2 * 3</span><br><span class="hljs-built_in">print</span>(b)<br><br>c = <span class="hljs-number">10</span><br>c += <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br><span class="hljs-comment"># 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3</span><br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h2 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4. 比较运算符"></a>4. 比较运算符</h2><p>比较运算符也叫关系运算符， 通常用来判断。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如a&#x3D;3,b&#x3D;3，则（a &#x3D;&#x3D; b) 为 True</td></tr><tr><td>!&#x3D;</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如a&#x3D;3,b&#x3D;3，则（a &#x3D;&#x3D; b) 为 True如a&#x3D;1,b&#x3D;3，则(a !&#x3D; b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a&#x3D;7,b&#x3D;3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a&#x3D;7,b&#x3D;3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;&#x3D;</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a&#x3D;7,b&#x3D;3，则(a &lt; b) 为 False如a&#x3D;3,b&#x3D;3，则(a &gt;&#x3D; b) 为 True</td></tr><tr><td>&lt;&#x3D;</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a&#x3D;3,b&#x3D;3，则(a &lt;&#x3D; b) 为 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">7</span><br>b = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(a == b)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a != b)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a &lt; b)   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a &gt; b)   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a &lt;= b)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a &gt;= b)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5. 逻辑运算符"></a>5. 逻辑运算符</h2><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br>c = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>((a &lt; b) <span class="hljs-keyword">and</span> (b &lt; c))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>((a &gt; b) <span class="hljs-keyword">and</span> (b &lt; c))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>((a &gt; b) <span class="hljs-keyword">or</span> (b &lt; c))   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> (a &gt; b))          <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="5-1-拓展"><a href="#5-1-拓展" class="headerlink" title="5.1 拓展"></a>5.1 拓展</h3><p>数字之间的逻辑运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br>b = <span class="hljs-number">1</span><br>c = <span class="hljs-number">2</span><br><br><span class="hljs-comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">and</span> b)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">and</span> a)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">and</span> c)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(c <span class="hljs-keyword">and</span> a)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">and</span> c)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(c <span class="hljs-keyword">and</span> b)  <span class="hljs-comment"># 1</span><br><br><span class="hljs-comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">or</span> b)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">or</span> c)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">or</span> c)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>算数运算的优先级<ul><li>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li></ul></li><li>赋值运算符<ul><li>&#x3D;</li></ul></li><li>复合赋值运算符<ul><li>+&#x3D;</li><li>-&#x3D;</li><li>优先级<ol><li>先算复合赋值运算符右侧的表达式</li><li>再算复合赋值运算的算数运算</li><li>最后算赋值运算</li></ol></li></ul></li><li>比较运算符<ul><li>判断相等： &#x3D;&#x3D; </li><li>大于等于： &gt;&#x3D;</li><li>小于等于：&lt;&#x3D;</li><li>不等于： !&#x3D;</li></ul></li><li>逻辑运算符<ul><li>与： and</li><li>或：or</li><li>非：not</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>运算符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python转换数据类型</title>
    <link href="/2023/01/14/Python%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/01/14/Python%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一-转换数据类型的作用"><a href="#一-转换数据类型的作用" class="headerlink" title="一. 转换数据类型的作用"></a>一. 转换数据类型的作用</h1><p>问：input()接收用户输入的数据都是字符串类型，如果用户输入1，想得到整型该如何操作？</p><p>答：转换数据类型即可，即将字符串类型转换成整型。</p><h1 id="二-转换数据类型的函数"><a href="#二-转换数据类型的函数" class="headerlink" title="二. 转换数据类型的函数"></a>二. 转换数据类型的函数</h1><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;int(x [,base ])&#x3D;&#x3D;</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">&#x3D;&#x3D;float(x )&#x3D;&#x3D;</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">complex(real [,imag ])</td><td align="center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td align="center">&#x3D;&#x3D;str(x )&#x3D;&#x3D;</td><td align="center">将对象 x 转换为字符串</td></tr><tr><td align="center">repr(x )</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center">&#x3D;&#x3D;eval(str )&#x3D;&#x3D;</td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="center">&#x3D;&#x3D;tuple(s )&#x3D;&#x3D;</td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center">&#x3D;&#x3D;list(s )&#x3D;&#x3D;</td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">chr(x )</td><td align="center">将一个整数转换为一个Unicode字符</td></tr><tr><td align="center">ord(x )</td><td align="center">将一个字符转换为它的ASCII整数值</td></tr><tr><td align="center">hex(x )</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x )</td><td align="center">将一个整数转换为一个八进制字符串</td></tr><tr><td align="center">bin(x )</td><td align="center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><h1 id="三-快速体验"><a href="#三-快速体验" class="headerlink" title="三. 快速体验"></a>三. 快速体验</h1><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 接收用户输入</span><br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的幸运数字：&#x27;</span>)<br><br><span class="hljs-comment"># 2. 打印结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;您的幸运数字是<span class="hljs-subst">&#123;num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-comment"># 3. 检测接收到的用户输入的数据类型 -- str类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(num))<br><br><span class="hljs-comment"># 4. 转换数据类型为整型 -- int类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>(num)))<br></code></pre></td></tr></table></figure><h1 id="四-实验"><a href="#四-实验" class="headerlink" title="四. 实验"></a>四. 实验</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. float() -- 转换成浮点型</span><br>num1 = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(num1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">float</span>(num1)))<br><br><span class="hljs-comment"># 2. str() -- 转换成字符串类型</span><br>num2 = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(num2)))<br><br><span class="hljs-comment"># 3. tuple() -- 将一个序列转换成元组</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(list1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">tuple</span>(list1)))<br><br><br><span class="hljs-comment"># 4. list() -- 将一个序列转换成列表</span><br>t1 = (<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(t1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">list</span>(t1)))<br><br><span class="hljs-comment"># 5. eval() -- 将字符串中的数据转换成Python表达式原本类型</span><br>str1 = <span class="hljs-string">&#x27;10&#x27;</span><br>str2 = <span class="hljs-string">&#x27;[1, 2, 3]&#x27;</span><br>str3 = <span class="hljs-string">&#x27;(1000, 2000, 3000)&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str1)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str2)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str3)))<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>转换数据类型常用的函数<ul><li>int()</li><li>float()</li><li>str()</li><li>list()</li><li>tuple()</li><li>eval()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>转换数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python输入</title>
    <link href="/2023/01/14/Python%E8%BE%93%E5%85%A5/"/>
    <url>/2023/01/14/Python%E8%BE%93%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="一-输入"><a href="#一-输入" class="headerlink" title="一. 输入"></a>一. 输入</h1><p>在Python中，程序接收用户输入的数据的功能即是输入。</p><h2 id="1-2-输入的语法"><a href="#1-2-输入的语法" class="headerlink" title="1.2 输入的语法"></a>1.2 输入的语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;提示信息&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="1-3-输入的特点"><a href="#1-3-输入的特点" class="headerlink" title="1.3 输入的特点"></a>1.3 输入的特点</h2><ul><li>当程序执行到<code>input</code>，等待用户输入，输入完成之后才继续向下执行。</li><li>在Python中，<code>input</code>接收用户输入后，一般存储到变量，方便使用。</li><li>在Python中，<code>input</code>会把接收到的任意用户输入的数据都当做字符串处理。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的密码：&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的密码是<span class="hljs-subst">&#123;password&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(password))<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>输入功能<ul><li>input(‘提示文字’)</li></ul></li><li>输入的特点<ul><li>一般将input接收的数据存储到变量</li><li>input接收的任何数据默认都是字符串数据类型</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>输入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python输出</title>
    <link href="/2023/01/14/Python%E8%BE%93%E5%87%BA/"/>
    <url>/2023/01/14/Python%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>作用：程序输出内容给用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)<br><br>age = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(age)<br><br><span class="hljs-comment"># 需求：输出“今年我的年龄是18岁”</span><br></code></pre></td></tr></table></figure><h1 id="一-格式化输出"><a href="#一-格式化输出" class="headerlink" title="一.  格式化输出"></a>一.  格式化输出</h1><p>所谓的格式化输出即按照一定的格式输出内容。</p><h3 id="1-1-格式化符号"><a href="#1-1-格式化符号" class="headerlink" title="1.1 格式化符号"></a>1.1 格式化符号</h3><table><thead><tr><th align="center">格式符号</th><th align="center">转换</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;%s&#x3D;&#x3D;</td><td align="center">字符串</td></tr><tr><td align="center">&#x3D;&#x3D;%d&#x3D;&#x3D;</td><td align="center">有符号的十进制整数</td></tr><tr><td align="center">&#x3D;&#x3D;%f&#x3D;&#x3D;</td><td align="center">浮点数</td></tr><tr><td align="center">%c</td><td align="center">字符</td></tr><tr><td align="center">%u</td><td align="center">无符号十进制整数</td></tr><tr><td align="center">%o</td><td align="center">八进制整数</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数（小写ox）</td></tr><tr><td align="center">%X</td><td align="center">十六进制整数（大写OX）</td></tr><tr><td align="center">%e</td><td align="center">科学计数法（小写’e’）</td></tr><tr><td align="center">%E</td><td align="center">科学计数法（大写’E’）</td></tr><tr><td align="center">%g</td><td align="center">%f和%e的简写</td></tr><tr><td align="center">%G</td><td align="center">%f和%E的简写</td></tr></tbody></table><blockquote><p>技巧</p></blockquote><ul><li>%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</li><li>%.2f，表示小数点后显示的小数位数。</li></ul><h3 id="1-2-体验"><a href="#1-2-体验" class="headerlink" title="1.2 体验"></a>1.2 体验</h3><p>格式化字符串除了%s，还可以写为<code>f&#39;&#123;表达式&#125;&#39;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">18</span> <br>name = <span class="hljs-string">&#x27;TOM&#x27;</span><br>weight = <span class="hljs-number">75.5</span><br>student_id = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 我的名字是TOM</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s&#x27;</span> % name)<br><br><span class="hljs-comment"># 我的学号是0001</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的学号是%4d&#x27;</span> % student_id)<br><br><span class="hljs-comment"># 我的体重是75.50公斤</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的体重是%.2f公斤&#x27;</span> % weight)<br><br><span class="hljs-comment"># 我的名字是TOM，今年18岁了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s，今年%d岁了&#x27;</span> % (name, age))<br><br><span class="hljs-comment"># 我的名字是TOM，明年19岁了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s，明年%d岁了&#x27;</span> % (name, age + <span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># 我的名字是TOM，明年19岁了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;我的名字是<span class="hljs-subst">&#123;name&#125;</span>, 明年<span class="hljs-subst">&#123;age + <span class="hljs-number">1</span>&#125;</span>岁了&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读。</p></blockquote><h3 id="1-3-转义字符"><a href="#1-3-转义字符" class="headerlink" title="1.3 转义字符"></a>1.3 转义字符</h3><ul><li><code>\n</code>：换行。</li><li><code>\t</code>：制表符，一个tab键（4个空格）的距离。</li></ul><h3 id="1-4-结束符"><a href="#1-4-结束符" class="headerlink" title="1.4 结束符"></a>1.4 结束符</h3><blockquote><p>想一想，为什么两个print会换行输出？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输出的内容&#x27;</span>, end=<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>在Python中，print()， 默认自带<code>end=&quot;\n&quot;</code>这个换行结束符，所以导致每两个<code>print</code>直接会换行展示，用户可以按需求更改结束符。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>格式化符号<ul><li>%s：格式化输出字符串</li><li>%d：格式化输出整数</li><li>%f：格式化输出浮点数</li></ul></li><li>f-字符串<ul><li>f’{表达式}’</li></ul></li><li>转义字符<ul><li>\n：换行</li><li>\t：制表符</li></ul></li><li>print结束符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;内容&#x27;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>输出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python注释</title>
    <link href="/2023/01/14/Python%E6%B3%A8%E9%87%8A/"/>
    <url>/2023/01/14/Python%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="注释的分类及语法"><a href="#注释的分类及语法" class="headerlink" title="注释的分类及语法"></a>注释的分类及语法</h1><p>注释分为两类：&#x3D;&#x3D;单行注释&#x3D;&#x3D; 和 &#x3D;&#x3D;多行注释&#x3D;&#x3D;。</p><ul><li>单行注释</li></ul><p>只能注释一行内容，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注释内容</span><br></code></pre></td></tr></table></figure><ul><li>多行注释</li></ul><p>可以注释多行内容，一般用在注释一段代码的情况， 语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">第一行注释</span><br><span class="hljs-string">第二行注释</span><br><span class="hljs-string">第三行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">注释1</span><br><span class="hljs-string">注释2</span><br><span class="hljs-string">注释3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>快捷键： &#x3D;&#x3D;ctrl + &#x2F;&#x3D;&#x3D;</p></blockquote><h2 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h2><ul><li>单行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输出hello world</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)  <span class="hljs-comment"># 输出(简单的说明可以放到一行代码的后面，一般习惯代码后面添加两个空格再书写注释文字)</span><br></code></pre></td></tr></table></figure><ul><li>多行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    下面三行都是输出的作用，输出内容分别是：</span><br><span class="hljs-string">    hello Python</span><br><span class="hljs-string">    hello itcast</span><br><span class="hljs-string">    hello itheima</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itcast&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itheima&#x27;</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    下面三行都是输出的作用，输出内容分别是：</span><br><span class="hljs-string">    hello Python</span><br><span class="hljs-string">    hello itcast</span><br><span class="hljs-string">    hello itheima</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itcast&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itheima&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：解释器不执行任何的注释内容。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>注释的作用</li></ul><p>用人类熟悉的语言对代码进行解释说明，方便后期维护。</p><ul><li>注释的分类<ul><li>单行： <code># 注释内容</code>，快捷键ctrl+&#x2F;</li><li>多行：<code>&quot;&quot;&quot; 注释内容 &quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39; 注释内容 &#39;&#39;&#39;</code></li></ul></li><li>解释器不执行注释内容</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>注释</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>article title</title>
    <link href="/2023/01/13/article-title/"/>
    <url>/2023/01/13/article-title/</url>
    
    <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><p>这是一张图片<br><img src="/2023/01/13/article-title/KDA.jpg"></p><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><p>这是一串代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arry[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>就到这吧</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/13/hello-world/"/>
    <url>/2023/01/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
